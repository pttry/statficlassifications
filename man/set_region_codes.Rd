% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_region_codes.R
\name{set_region_codes}
\alias{set_region_codes}
\alias{set_region_codes_vct}
\alias{set_region_codes_fct}
\title{Standardize region codes}
\usage{
set_region_codes(
  x,
  region_level = NULL,
  year = NULL,
  offline = TRUE,
  use_char_length_info = NULL
)

set_region_codes_vct(
  x,
  region_level = NULL,
  year = NULL,
  offline = TRUE,
  use_char_length_info = NULL
)

set_region_codes_fct(
  x,
  region_level = NULL,
  year = NULL,
  offline = TRUE,
  use_char_length_info = FALSE
)
}
\arguments{
\item{x}{character vector of region codes}

\item{region_level}{character, optional region level of the input region codes}

\item{year}{double, optional year of the classification used}

\item{offline}{logical, whether works offline with package data. Defaults to TRUE.}

\item{use_char_length_info}{TRUE or named vector, whether to use code character length
information in determining their region level. Defaults to \code{NULL}.}
}
\description{
TODO: R2D2 IS SET TO SALO CURRENTLY. I.E. USE NUMBERS IN STRINGS MAYBE
ONLY IF THERE IS ONLY NUMBERS IN STRINGS
}
\details{
To avoid non-unique region codes, use the prefixed region codes.
This function "standardizes" region codes in this format.
Region codes already in this format are left as they are.

The function is strict in not making any assumptions in cases of
ambiguous region codes. Some plain numbers may map to multiple
region codes and in these cases the user can restrict the domain
by giving a set of region levels to whose codes input vector
codes are allowed to match.

If your vector contains ambiguous codes you may try breaking it
into pieces where you know the unique region level of the codes in each
piece and treat these pieces separately giving region level as
an argument.

The function does not create region codes from scratch itself but, inputs
are matched to the potential codes in the official classifications.
These classifications are accessed using \code{get_regionclassification}-function.
Thus, only real region codes can be set. The matching of inputs into
potential region codes occurs in \code{match_region_codes_interal}- and
\code{match_region_codes}-functions.
}
\section{Functions}{
\itemize{
\item \code{set_region_codes_vct()}: Standardize region codes with prefixes. For internal use

\item \code{set_region_codes_fct()}: Standardize region codes with prefixes. For internal use

}}
\examples{

  v <- c("191", "047", "063")
  set_region_codes(v)
  v <- c("020", "047", "15")
  set_region_codes(v, use_char_length_info = TRUE)
  v <- c("005", "020", "047", "MK01", "MK02", "MK04")
  set_region_codes(v, region_level = "kunta")
  f <- factor(c("005", "020", "047", "MK01", "MK02", "MK04"))
  set_region_codes(f, region_level = c("kunta"))

  # If input is not recognized as region code, tries to reduce it to double
  # and infer region from this number. This is how following is possible:
  set_region_codes("alue045")

  # But it means also that this happens
  set_region_codes("lsdf4fsdffs5sfs")

}
