count(df, id)
df %>% group_by(id) %>% summarize(first())
df %>% group_by(id) %>% summarize(first(alkupvm))
df %>% group_by(id) %>% summarize(last(alkupvm))
df
df %>% mutate(loppupvm_lag = lag(loppupvm))
args(lag)
df %>% mutate(loppupvm_lag = lag(loppupvm) ,default = 0)
df %>% mutate(loppupvm_lag = lag(loppupvm ,default = 0))
df2 <- tibble(id = 1:10, x = rnorm(10,0,1))
df2
df2 %>% mutate(df2, var = ntile(x, 5)
)
df2 %>% mutate(var = between(0.5,1))
args(between)
df2 %>% mutate(var = between(x, 0.5,1))
df2 %>% mutate(var = cume_dist(x))
# tidy selection and data masking
mtcars
var_summary <- function(data, var) {}
var_summary <- function(data, var) {
data %>% summarize(n = n(), min = min( {{ var }}, max = ( {{ var }} ) )}
data %>% summarize(n = n(), min = min( {{ var }} ), max = ( {{ var }} ) )}
var_summary <- function(data, var) {
data %>% summarize(n = n(), min = min( {{ var }} ), max = ( {{ var }} ) )}
var_summary
df
df2
var_summary(df2, x)
df <- tibble(location = 1:10, x = runif(10, 200,1000))
d
df
df %>% mutate(df, share = x / sum(.data$x))
# data masking and tidy selection
df <- tibble(x = 1:10, y = rnorm(10,0,1), z = cumsum(y))
df
line_plot <- function(df, var) {
ggplot(df, aes(x = x, y = {{var}})) + geom_line()
}
line_plot(df, x)
df
line_plot(df, y)
line_plot(df, z)
selection <- c("x,y")
df %>% select(all_of(selection))
selection <- c("x","y")
df %>% select(all_of(selection))
selection <- c("x", "y", "g")
df %>% select(any_of(selection))
df %>% select(all_of(selection))
df
apply(df, margin = 2, sum)
args(apply)
apply(df, margin = 2, FUN = sum)
apply(df, 2, sum)
apply(df, 1, sum)
apply(df, 1, as.character)
apply(df, 2, as.character)
# use apply for data.frames and matrices
# lapply makes lists from lists
# lapply produces lists, sapply profuces vectors
# apply, lapply, sapply, tapply
id <- replicate(1000000, paste(sample(c(letters, 0:9), 5), collapse = ""))
id <- c(id, id[500000:1000000], id[900000:1000000])
dates <- seq(from = as.Date("2010-01-01"), to = as.Date("2012-12-31"), by = 1)
alkupvm <- sample(dates[dates < "2011-01-01"], length(id))
loppupvm <- sample(dates[dates > "2011-01-01"], length(id))
data <- data.frame(id = id, alkupvm = alkupvm, loppupvm = loppupvm) %>% arrange(id)
alkupvm <- sample(dates[dates < "2011-01-01"], length(id), replace = TRUE)
loppupvm <- sample(dates[dates > "2011-01-01"], length(id), replace = TRUE))
loppupvm <- sample(dates[dates > "2011-01-01"], length(id), replace = TRUE)
data <- data.frame(id = id, alkupvm = alkupvm, loppupvm = loppupvm) %>% arrange(id)
start <- Sys.time()
data %>% collapse_spells()
end <- Sys.time()
end-start
start <- Sys.time()
data %>% lazy_dt() %>% collapse_spells() %>% as_tibble()
end <- Sys.time()
end-start
library(dtplyr)
install.packages("dtplyr")
install.packages("dtplyr")
install.packages("dtplyr")
install.packages("dtplyr")
start <- Sys.time()
data %>% collapse_spells()
end <- Sys.time()
end-start
start <- Sys.time()
data %>% lazy_dt() %>% collapse_spells() %>% as_tibble()
end <- Sys.time()
end-start
library(tidyverse)
library(dtplyr)
lazy_dt
install.packages("dplyr")
install.packages("dplyr")
library(tidyverse)
df %>% group_by(id)
library(dplyr)
installed.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
library(tidyverse)
library(ellipsis)
library(tidyverse)
.libPaths()
detach(ellipsis)
detach("ellipsis")
library(devtools)
load_all()
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
head(results)
searchterms <- c("instit_sektori", "1996")
select(df, all_of(searchterms))
library(tidyverse)
select(results, all_of(searchterms))
filter(results, c(source, year1, target, year2) %in% searchterms)
c(source, year1, target, year2) %in% searchterms
rowwise( filter(results, c(source, year1, target, year2) %in% searchterms))
filter(results, all(c(source, year1, target, year2) %in% searchterms))
searchterms
results
filter(results, all(searchterms %in% c(source, year1, target, year2)))
searchterms
filter(results, all(searchterms %in% c(source, year1, target, year2)))
results[1,]
sapply(dim(results)[1], function(i) { all(searchterms %in% c(results[i,source], results[i, year1], results[i, target], results[i, year2])) })
i <- 1
results[i,source]
sapply(dim(results)[1], function(i) { all(searchterms %in% c(results[i,"source"], results[i, "year1"], results[i, "target"], results[i, "year2"])) })
sapply(1:dim(results)[1], function(i) { all(searchterms %in% c(results[i,"source"], results[i, "year1"], results[i, "target"], results[i, "year2"])) })
sapply(1:dim(results)[1], function(i) { all(searchterms %in% c(results[i,1], results[i, 3], results[i, 5], results[i, 7])) })
sapply(1:dim(results)[1],  ~all(searchterms %in% c(results[.x,1], results[.x,3], results[.x,5], results[.x,7])) )
sapply(1:dim(results)[1],  ~all(searchterms %in% c(results[.,1], results[.,3], results[.,5], results[.,7])) )
sapply(1:dim(results)[1],  ~all(searchterms %in% c(results[.x,1], results[.x,3], results[.x,5], results[.x,7])) )
sapply(1:dim(results)[1],  ~(all(searchterms %in% c(results[.x,1], results[.x,3], results[.x,5], results[.x,7]))))
filter_rows_by_search_terms <- function(df, searchterms) {
sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,1], f[i,3], df[i,5], df[i,7])) })
}
filter_rows_by_search_terms(results, searchterms)
filter_rows_by_search_terms <- function(df, searchterms) {
sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,1], df[i,3], df[i,5], df[i,7])) })
}
filter_rows_by_search_terms(results, searchterms)
filter(df, sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,1], df[i,3], df[i,5], df[i,7])) }))
filter_rows_by_search_terms <- function(df, searchterms) {
filter(df, sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,1], df[i,3], df[i,5], df[i,7])) }))
}
filter_rows_by_search_terms(results, searchterms)
filter_rows_by_search_terms <- function(df, searchterms) {
dplyr::filter(df, sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,c(1,3,5,7)])) }))
}
filter_rows_by_search_terms(results, searchterms)
search_keys("kunta", "maakunta")
filter_api_results_by_search_terms <- function(df, searchterms) {
dplyr::filter(df, sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,c(1,3,5,7)])) }))
}
#'    search_keys(search_source = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta"
#'    search_keys(source_searchterm = "kunta", target_searchterm = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta" for year 2016 and print as localId
#'   search_keys(source_searchterm = "kunta", target_searchterm = "maakunta",
#'               year = 2016, as_localId = TRUE)
#'
#'
search_keys <- function(..., year = NULL,  as_localId = FALSE) {
source_searchterm <- source
target_searchterm <- target
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
# Filter results by the searchterms
searchterms <- unlist(list(...))
results <- filter_api_results_by_search_terms(results, searchterms)
# Filter results by year.
if(!is.null(year)) {
results <- dplyr::filter(results, year1 == year | year2 == year)
}
# Interrupt if nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output.
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- create_localId_name(input_vector = results[i,])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results[i, "source"],
results[i, "year1"],
"->",
results[i, "target"],
results[i, "year2"], sep = " ")
}
}
# Return.
unique(output)
}
search_keys("kunta", "maakunta")
#'    search_keys(search_source = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta"
#'    search_keys(source_searchterm = "kunta", target_searchterm = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta" for year 2016 and print as localId
#'   search_keys(source_searchterm = "kunta", target_searchterm = "maakunta",
#'               year = 2016, as_localId = TRUE)
#'
#'
search_keys <- function(..., year = NULL,  as_localId = FALSE) {
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
# Filter results by the searchterms
searchterms <- unlist(list(...))
results <- filter_api_results_by_search_terms(results, searchterms)
# Filter results by year.
if(!is.null(year)) {
results <- dplyr::filter(results, year1 == year | year2 == year)
}
# Interrupt if nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output.
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- create_localId_name(input_vector = results[i,])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results[i, "source"],
results[i, "year1"],
"->",
results[i, "target"],
results[i, "year2"], sep = " ")
}
}
# Return.
unique(output)
}
search_keys("kunta", "maakunta")
search_keys("kuntaryhm√§", "maakunta")
search_keys()
search_keys(ammatti)
search_keys("ammatti"
)
search_keys("kunta", "ely", "2018")
filter_api_results_by_search_terms <- function(df, searchterms) {
dplyr::filter(df, sapply(1:dim(df)[1], ~ { all(searchterms %in% c(df[.x,c(1,3,5,7)])) }))
}
filter_api_results_by_search_terms(results, ssearchterms)
source('C:/Users/juhoa/git_clones/statficlassifications/R/functions_for_api_search.R', echo=TRUE)
#' Search for classification keys
#'
#' Searches and browses available classification keys / correspondence tables in
#' the correspondenceTables classification service
#'
#' @param ... character, search words.
#' @param search_source logical, whether search only among the sources.
#' @param search_target logical, whether search only among the targets.
#' @param source character, a search word to use in search only among the sources.
#' @param target character, a search word to use in search only among the targets.
#' @param year character or numerical, search for specific years.
#' @param as_localId logical, whether returns the localID of the found table. Defaults to FALSE.
#'
#' @return character vector
#'
#' @import dplyr
#' @export
#'
#' @examples
#'
#' # Browse all keys
#'    search_keys()
#'
#' # Search for keys with search word "maakunta"
#'    search_keys("maakunta")
#'
#' # Search for keys that have "maakunta" as source
#'    search_keys(search_source = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta"
#'    search_keys(source_searchterm = "kunta", target_searchterm = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta" for year 2016 and print as localId
#'   search_keys(source_searchterm = "kunta", target_searchterm = "maakunta",
#'               year = 2016, as_localId = TRUE)
#'
#'
search_keys <- function(...,
search_source = FALSE,
search_target = FALSE,
source = NULL,
target= NULL,
year = NULL,
as_localId = FALSE) {
source_searchterm <- source
target_searchterm <- target
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
# Filter results by the searchterms
searchterms <- unlist(list(...))
if(length(searchterms) > 0) {
results_temp <- data.frame()
for(word in searchterms) {
match_indicator_source <- NULL
match_indicator_target <- NULL
if(!search_target) {
match_indicator_source <- sapply(results$source, grepl, pattern = word)
}
if(!search_source) {
match_indicator_target <- sapply(results$target, grepl, pattern = word)
}
results_temp <- rbind(results_temp,
results[match_indicator_source,],
results[match_indicator_target,])
}
results <- results_temp
}
if(!is.null(source_searchterm)) {
results <- dplyr::filter(results, source_searchterm == source)
}
if(!is.null(target_searchterm)) {
results <- dplyr::filter(results, target_searchterm == target)
}
# Filter results by year.
if(!is.null(year)) {
results <- dplyr::filter(results, year1 == year | year2 == year)
}
# Interrupt if nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output.
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- create_localId_name(input_vector = results[i,])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results[i, "source"],
results[i, "year1"],
"->",
results[i, "target"],
results[i, "year2"], sep = " ")
}
}
# Return.
unique(output)
}
#' Search for classifications
#'
#' Searches and browses available classifications.
#'
#' @param ... character, search words.
#' @param year character or numerical, search for specific years.
#' @param as_localId logical, whether returns the localID of the found table. Defaults to FALSE.
#'
#' @return
#' @export
#'
#' @examples
#'
#'   search_classifications("ammatti")
#'   search_classifications("ammatti", year = 2021, as_localId = TRUE)
#'
search_classifications <- function(...,
year = NULL,
as_localId = FALSE){
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "classifications"))
search_year <- year
# Filter results by the searchterms
searchterms <- unlist(list(...))
if(length(searchterms) > 0) {
results <- dplyr::filter(results, series %in% searchterms)
}
if(!is.null(year)) {
results <- dplyr::filter(results, year == search_year)
}
# Interrupt of nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- paste0(results$series[i], results$nro[i], results$year[i], results$date[i])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results$series[i], results$year[i])
}
}
# Return.
unique(output)
}
filter_api_results_by_search_terms <- function(df, searchterms) {
library(statficlassifications)
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "classifications"))
results
df <- results
dplyr::filter(df, sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,c(1,3,5,7)])) }))
#'    search_keys(search_source = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta"
#'    search_keys(source_searchterm = "kunta", target_searchterm = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta" for year 2016 and print as localId
#'   search_keys(source_searchterm = "kunta", target_searchterm = "maakunta",
#'               year = 2016, as_localId = TRUE)
#'
#'
search_keys <- function(..., year = NULL,  as_localId = FALSE) {
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
# Filter results by the searchterms
searchterms <- unlist(list(...))
results <-  dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3,5,7)])) }))
# Filter results by year.
if(!is.null(year)) {
results <- dplyr::filter(results, year1 == year | year2 == year)
}
# Interrupt if nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output.
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- create_localId_name(input_vector = results[i,])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results[i, "source"],
results[i, "year1"],
"->",
results[i, "target"],
results[i, "year2"], sep = " ")
}
}
# Return.
unique(output)
}
search_keys("kunta", "seutukunta")
search_keys("kunta", "seutukunta", "2005"
)
search_keys("kunta", "seutukunta", "2013")
search_keys("kunta", "seutukunta", 2013)
head(results)
rm(list  =ls()); gc()
load_all()
search_keys("kunta", "ely")
search_keys()
search_keys("kunta", "maakunta")
search_terms <- c("kunta", "ely")
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
results <-  dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3)])) }))
searchterms <- search_terms
dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3)])) }))
dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3,5,7)])) }))
load_all()
search_keys("kunta")
search_keys("kunta", "ely")
search_keys("kunta", "ely" 2012)
search_keys("kunta", "ely", 2012)
search_classifications("kunta")
search_classifications("kunta", 2016)
search_classifications("ammatti")
search_classifications("ammatti", as_localId = TRUE)
search_keys("kunta", "maakunta", 2010, as_localId = TRUE)
document()
load_all()
search_keys("kunta", "maakunta")
search_keys("kunta", "maakunta", 2016)
load_all()
search_classifications("kunta", 2014)
suppressMessages
load_all()
search_keys("kunta")
search_keys("kunta", "maakunta")
search_classifications("kunta")
load_all()
search_classifications("kunta")
document()
search_keys("kunta", "suuralue", 2020)
install()
