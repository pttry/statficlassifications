data(regionkey, package = "statficlassifications")
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
codes
"193" %in% codes
"193" %in% codes$SK
"193" %in% unlist(codes)
"062" %in% unlist(codes)
"070" %in% unlist(codes)
"001" %in% unlist(codes)
#' @describeIn set_region_codes
#'
set_region_codes_vct <- function(x) {
x_names <- names(x)
# construct a list with all kunta, seutukunta, maakunta codes without prefixes
data(abolished_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(!all(x %in% unlist(codes))) {
warning("Some codes not recognized as region codes.")
}
# For kunta, seutukunta and maakunta, add corresponding prefixes if input does not have
# prefixes
for(prefix in prefixes) {
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
}
# Tranform any "000"s to "SSS"s
if(any(grepl("000", x))) {
x[x%in% c("000")] <- "SSS"
}
names(x) <- x_names
x
}
set_region_codes_vct("1001")
set_region_codes_vct("070")
set_region_codes_vct("045")
set_region_codes_vct("13")
set_region_codes_vct("31")
#' @describeIn set_region_codes
#'
set_region_codes_vct <- function(x) {
x_names <- names(x)
# construct a list with all kunta, seutukunta, maakunta codes without prefixes
data(abolished_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(!all(x %in% unlist(codes))) {
warning(paste("Codes",
paste(x[!(x %in% unlist(codes))], collapse = ", "),
"not recognized as region codes.", sep = " "))
}
# For kunta, seutukunta and maakunta, add corresponding prefixes if input does not have
# prefixes
for(prefix in prefixes) {
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
}
# Tranform any "000"s to "SSS"s
if(any(grepl("000", x))) {
x[x%in% c("000")] <- "SSS"
}
names(x) <- x_names
x
}
set_region_codes_vct("31")
#' @describeIn set_region_codes
#'
set_region_codes_vct <- function(x) {
x_names <- names(x)
# construct a list with all kunta, seutukunta, maakunta codes without prefixes
data(abolished_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(!all(x %in% unlist(codes))) {
warning(paste("Code(s)",
paste(x[!(x %in% unlist(codes))], collapse = ", "),
"not recognized as region codes.", sep = " "))
}
# For kunta, seutukunta and maakunta, add corresponding prefixes if input does not have
# prefixes
for(prefix in prefixes) {
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
}
# Tranform any "000"s to "SSS"s
if(any(grepl("000", x))) {
x[x%in% c("000")] <- "SSS"
}
names(x) <- x_names
x
}
set_region_codes_vct(c("31", "090", "045", "13", "1000"))
#' @describeIn set_region_codes
#'
set_region_codes_vct <- function(x) {
x_names <- names(x)
# construct a list with all kunta, seutukunta, maakunta codes without prefixes
data(abolished_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(!all(x %in% unlist(codes))) {
warning(paste("Code(s)",
paste(x[!(x %in% unlist(codes))], collapse = ", "),
"not recognized as region codes. They have been left as they were.", sep = " "))
}
# For kunta, seutukunta and maakunta, add corresponding prefixes if input does not have
# prefixes
for(prefix in prefixes) {
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
}
# Tranform any "000"s to "SSS"s
if(any(grepl("000", x))) {
x[x%in% c("000")] <- "SSS"
}
names(x) <- x_names
x
}
set_region_codes_vct(c("31", "090", "045", "13", "1000"))
v <- c("020", "047", "15", "133")
v <- as.double(v)
c
v
set_region_codes_vct(v)
df <- data.frame(kunta_code = c("020", "047", "15", "133"), values = rnorm(4))
df
set_region_codes(df)
#' @describeIn set_region_codes
#'
set_region_codes_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- set_region_codes_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- set_region_codes_fct(x[[col]])
}
x
}
set_region_codes_df(df, "kunta_code")
#' Standardize region codes with prefixes
#'
#' @param x character vector of region codes
#'
#' @return
#' @export
#'
#' @examples
#'
#'
#'   v <- c("020", "047", "15", "133")
#'   set_region_codes(v)
#'   v <- c("Akaa" = "020", "Enontekiö" = "047", "Pohjanmaa" = "15", "Keuruu" =  "133")
#'   set_region_codes(v)
#'   v <- c("020" = "Akaa", "KU047" = "Enontekiö", "15" = "Pohjanmaa", "SK133" = "Keuruu")
#'   set_region_codes(names(v))
#'   f <- factor(c("020", "047", "15", "133"))
#'   set_region_codes(f)
#'   df <- data.frame(kunta_code = c("020", "047", "15", "133"), values = rnorm(4))
#'   set_region_codes(df)
#'
set_region_codes <- function(x, col = NULL) {
if(is.vector(x)){
x <- set_region_codes_vct(x)
} else if(is.factor(x)) {
x <- set_region_codes_fct(x)
} else if(is.data.frame(x)) {
x <- set_region_codes_df(x, col)
} else {
stop("Argument not a vector, factor nor a data.frame.")
}
x
}
#' @describeIn set_region_codes
#'
set_region_codes_vct <- function(x) {
x_names <- names(x)
# construct a list with all kunta, seutukunta, maakunta codes without prefixes
data(abolished_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(!all(x %in% unlist(codes))) {
warning(paste("Code(s)",
paste(x[!(x %in% unlist(codes))], collapse = ", "),
"not recognized as region codes. They have been left as they were.", sep = " "))
}
# For kunta, seutukunta and maakunta, add corresponding prefixes if input does not have
# prefixes
for(prefix in prefixes) {
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
}
# Tranform any "000"s to "SSS"s
if(any(grepl("000", x))) {
x[x%in% c("000")] <- "SSS"
}
names(x) <- x_names
x
}
#' @describeIn set_region_codes
#'
set_region_codes_fct <- function(x) {
levels(x) <- set_region_codes_vct(levels(x))
x
}
#' @describeIn set_region_codes
#'
set_region_codes_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- set_region_codes_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- set_region_codes_fct(x[[col]])
}
x
}
v <- c("020", "047", "15", "133")
set_region_codes(v)
v <- c("Akaa" = "020", "Enontekiö" = "047", "Pohjanmaa" = "15", "Keuruu" =  "133")
set_region_codes(v)
v <- c("020" = "Akaa", "KU047" = "Enontekiö", "15" = "Pohjanmaa", "SK133" = "Keuruu")
set_region_codes(names(v))
f <- factor(c("020", "047", "15", "133"))
set_region_codes(f)
df <- data.frame(kunta_code = c("020", "047", "15", "133"), values = rnorm(4))
set_region_codes(df)
set_region_codes(df, "kunta_code")
#' Changes region codes to region names
#'
#' A wrapper that uses the statficlassifications::recode-function.
#'
#' @param data data.frame, the input data that contains a variable of region codes.
#' @param region character, the name of the variable of region codes.
#' @param year integer, the year of the applied classification key.
#'
#' @return data.frame
#' @export
#'
#' @examples
#'
#'   v <- c("SSS", "KU103", "KU061","SK213", "MK04")
#'   codes_to_names_vct(v)
#'   f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
#'   codes_to_names_vct(f)
#'   df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(n()))
#'   codes_to_names(df, "kunta_code")
#
#'
#'
codes_to_names <- function(x, col = NULL) {
if(is.vector(x)){
x <- codes_to_names_vct(x)
} else if(is.factor(x)) {
x <- codes_to_names_fct(x)
} else if(is.data.frame(x)) {
x <- codes_to_names_df(x, col)
} else {
stop("Argument not a vector, factor nor a data.frame.")
}
x
}
#' @describeIn codes_to_names
#'
codes_to_names_vct <- function(x) {
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_code = x), region_codes_names, by = "alue_code")$alue_name
x(names) <- x_names
x
}
#' @describeIn codes_to_names
#'
codes_to_names_fct <- function(x) {
levels(x) <- codes_to_names_vct(levels(x))
x
}
#' @describeIn set_region_codes
#'
codes_to_names_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- codes_to_names_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- codes_to_names_fct(x[[col]])
}
x
}
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names_vct(v)
x <- v
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_code = x), region_codes_names, by = "alue_code")$alue_name
x(names) <- x_names
x(names) <- x_names
x_names
x(names)
names(x) <- x_names
names(x)
#' @describeIn codes_to_names
#'
codes_to_names_vct <- function(x) {
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_code = x), region_codes_names, by = "alue_code")$alue_name
names(x) <- x_names
x
}
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names_vct(v)
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names_vct(f)
codes_to_names_vct(f) -> is.factor()
codes_to_names_vct(f) %>% is.factor()
f
x <- f
levels(x)
x
codes_to_names_vct(levels(x))
levels(x) <- codes_to_names_vct(levels(x))
x
#' @describeIn codes_to_names
#'
codes_to_names_fct <- function(x) {
levels(x) <- codes_to_names_vct(levels(x))
x
}
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names_fct(f)
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(n()))
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(4)
)
df
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(4))
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(5))
df
codes_to_names(df, "kunta_code")
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names(v)
#' Changes region codes to region names
#'
#' A wrapper that uses the statficlassifications::recode-function.
#'
#' @param data data.frame, the input data that contains a variable of region codes.
#' @param region character, the name of the variable of region codes.
#' @param year integer, the year of the applied classification key.
#'
#' @return data.frame
#' @export
#'
#' @examples
#'
#'   v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
#'   names_to_codes_vct(v)
#'   f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
#'   names_to_codes_fct(f)
#'   df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"),
#'                    values = rnorm(5))
#'   names_to_codes(df, "kunta_name")
#
#'
#'
names_to_codes <- function(x, col = NULL) {
if(is.vector(x)){
x <- names_to_codes_vct(x)
} else if(is.factor(x)) {
x <- names_to_codes_fct(x)
} else if(is.data.frame(x)) {
x <- names_to_codes_df(x, col)
} else {
stop("Argument not a vector, factor nor a data.frame.")
}
x
}
#' @describeIn codes_to_names
#'
names_to_codes_vct <- function(x) {
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")$alue_code
names(x) <- x_names
x
}
#' @describeIn codes_to_names
#'
names_to_codes_fct <- function(x) {
levels(x) <- names_to_codes_vct(levels(x))
x
}
#' @describeIn set_region_codes
#'
names_to_codes_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- names_to_codes_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- names_to_codes_fct(x[[col]])
}
x
}
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
names_to_codes_fct(f)
f
levels(f)
x <- f
names_to_codes_vct(levels(x))
x
levels(x) <- names_to_codes_vct(levels(x))
x
x <- f
levels(x)
names_to_codes_vct(levels(x))
f
f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
f
names_to_codes_vct(levels(x))
x <- f
x
levels(x)
names_to_codes_vct(levels(x))
x
x <- levels(x)
x
x_names <- names(x)
x_names
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
region_codes_names
dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"),
values = rnorm(5))
names_to_codes(df, "kunta_name")
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
x <- v
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")$alue_code
x
#' @describeIn codes_to_names
#'
names_to_codes_vct <- function(x) {
l <- length(x)
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")$alue_code
names(x) <- x_names
if(length(x) > l) stop("Some region name(s) can be mapped to multiple region codes!")
x
}
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
names_to_codes_fct(f)
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"),
values = rnorm(5))
names_to_codes(df, "kunta_name")
v <- c("KOKO MAA", "Humppila", "Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
f <- factor(c("KOKO MAA", "Humppila","Ålands skärgård", "Satakunta"))
names_to_codes_fct(f)
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Ålands skärgård", "Satakunta"),
values = rnorm(5))
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Ålands skärgård", "Satakunta"),
values = rnorm(4))
names_to_codes(df, "kunta_name")
df
document()
rm(list = ls())
gc()
document()
check()
document()
check()
.Last.error.trace
load_all()
check()
install()
document()
help("purrr)
help("rlang")
library(rlang)
help("rlang")
ls("package:rlang")
warn
validate_signal_message
invisible(NULL)
"seq_alonq" %in% ls("package:rlang")
"seq2_alonq" %in% ls("package:rlang")
"seq2_along" %in% ls("package:rlang")
"seq_along" %in% ls("package:rlang")
seq2_along(1:4)
args(seq2_along)
args(seq_along)
