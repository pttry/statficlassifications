#'
#' @return
#' @export
#'
#' @examples
data_source_caption <- function(data) {
labs(caption = paste("Data source:",
attributes(data)$citation$author,
attributes(data)$citation$table_code,
sep = " "),
NA))
}
#' Add data source caption to figure
#'
#' @param data
#'
#' @return
#' @export
#'
#' @examples
data_source_caption <- function(data) {
labs(caption = paste("Data source:",
attributes(data)$citation$author,
attributes(data)$citation$table_code,
sep = " "))
}
ptt_draw_map(data1, aluejako = "maakunta", x = "TYOTOSUUS", data_source_caption = FALSE) + data_source_caption(data)
ptt_draw_map(data1, aluejako = "maakunta", x = "TYOTOSUUS", data_source_caption = FALSE) + data_source_caption(data1)
data <- ptt_read_data("tyonv_1001", region_level = "KOKO MAA")
head(data)
ptt_read_data("tyonv_1001", "KOKO MAA") %>%
filter(tiedot_code == "AVPAIKAT") %>%
{ ggplot(aes(x = time, y = values)) +
labs(x = NULL,
y = attributes(.)$codes_names$tiedot["AVPAIKAT"]) +
data_source_caption(.)
}
ptt_read_data("tyonv_1001", "KOKO MAA") %>%
filter(tiedot_code == "AVPAIKAT") %>%
{ ggplot(., aes(x = time, y = values)) +
labs(x = NULL,
y = attributes(.)$codes_names$tiedot["AVPAIKAT"]) +
data_source_caption(.)
}
ptt_read_data("tyonv_1001", "KOKO MAA") %>% filter(tiedot_code == "AVPAIKAT")
ptt_read_data("tyonv_1001", "KOKO MAA") %>%
filter(tiedot_code == "AVPAIKAT") %>%
{ ggplot(., aes(x = time, y = values)) +
geom_line() +
labs(x = NULL,
y = attributes(.)$codes_names$tiedot["AVPAIKAT"]) +
data_source_caption(.)
}
ptt_read_data("tyonv_1001", "KOKO MAA") %>%
filter(tiedot_code == "AVPAIKAT") %>%
{ ggplot(., aes(x = time, y = values)) +
geom_line() +
geom_smooth() +
labs(x = NULL,
y = attributes(.)$codes_names$tiedot["AVPAIKAT"]) +
data_source_caption(.)
}
head(data)
data <- ptt_read_data("tyonv_1001", "maakunta")
detect_region_var(data)
head(data)
statficlassifications::detect_region_var(data)$name_key
grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE)
args(stringr::str_remove)
stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
#' pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
#'      ptt_draw_map(2020, "kunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "seutukunta") %>%
#'      ptt_draw_map(2020, "seutukunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
#'      ptt_draw_map(2020, "maakunta", "TYOTOSUUS") +
#'      scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
#'        theme(legend.position = "top",
#'              legend.justification = "left")
#'
ptt_draw_map <- function(data,
vuosi = substring(max(data$time), 1,4),
aluejako = NULL, x,
time = max(data$time),
grid = TRUE,
long_data = TRUE) {
if(is.null(aluejako)) {
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
}
if(!is.null(attributes(data)$codes_names$tiedot)) {
codes_names_tiedot <-attributes(data)$codes_names$tiedot
} else {
codes_names_tiedot <- NULL
}
# Get a list of all available maps
capabilities <- xml2::read_xml("https://geo.stat.fi/geoserver/tilastointialueet/wfs?service=WFS&version=2.0.0&request=GetCapabilities")
map_names <- capabilities %>%
xml2::xml_find_all("//wfs:FeatureType/wfs:Name") %>%
xml2::xml_text()
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(vuosi), map_names, value = TRUE),
value = TRUE),
n = 1)
# Test if the search was successful
if(length(file) == 0) {stop("Map not found!")}
url <- httr::parse_url("https://geo.stat.fi/geoserver/tilastointialueet/wfs")
url$query <- list(service ="WFS",
version ="2.0.0",
request ="GetFeature",
typename = file,
outputFormat ="application/json")
prefix_name_key <- c("kunta" = "KU", "seutukunta" = "SK", "maakunta" = "MK", "suuralue" = "SA")
# Get map and modify region variable
map <- sf::st_read(httr::build_url(url), quiet = TRUE)
map[[aluejako]] <- paste0(prefix_name_key[aluejako], map[[aluejako]])
map <- dplyr::rename_with(map, ~paste0(aluejako, "_code"), aluejako)
# Filter required from the input data
if(long_data) {
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
}
output <- map %>%
dplyr::left_join(data, by = paste0(aluejako, "_code")) %>%
ggplot(aes_string(fill = x)) +
geom_sf() +
labs(fill = ifelse(!is.null(codes_names_tiedot),
codes_names_tiedot[x], x))
if(!grid) {
output <- output + theme(panel.grid.major = element_line(colour = "transparent"),
panel.border = element_rect(color = "transparent"),
plot.background = element_rect(color = "transparent")) +
coord_sf(datum = NA)
}
output
}
pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
ptt_draw_map(2020, "TYOTOSUUS")
data <- pttdatahaku::ptt_read_data("tyonv_1001", "kunta")
head(data)
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
#' pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
#'      ptt_draw_map(2020, "kunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "seutukunta") %>%
#'      ptt_draw_map(2020, "seutukunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
#'      ptt_draw_map(2020, "maakunta", "TYOTOSUUS") +
#'      scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
#'        theme(legend.position = "top",
#'              legend.justification = "left")
#'
ptt_draw_map <- function(data,
vuosi = substring(max(data$time), 1,4),
aluejako = NULL, x,
time = max(data$time),
grid = TRUE,
long_data = TRUE) {
if(long_data) {
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
}
if(is.null(aluejako)) {
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
}
if(!is.null(attributes(data)$codes_names$tiedot)) {
codes_names_tiedot <-attributes(data)$codes_names$tiedot
} else {
codes_names_tiedot <- NULL
}
# Get a list of all available maps
capabilities <- xml2::read_xml("https://geo.stat.fi/geoserver/tilastointialueet/wfs?service=WFS&version=2.0.0&request=GetCapabilities")
map_names <- capabilities %>%
xml2::xml_find_all("//wfs:FeatureType/wfs:Name") %>%
xml2::xml_text()
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(vuosi), map_names, value = TRUE),
value = TRUE),
n = 1)
# Test if the search was successful
if(length(file) == 0) {stop("Map not found!")}
url <- httr::parse_url("https://geo.stat.fi/geoserver/tilastointialueet/wfs")
url$query <- list(service ="WFS",
version ="2.0.0",
request ="GetFeature",
typename = file,
outputFormat ="application/json")
prefix_name_key <- c("kunta" = "KU", "seutukunta" = "SK", "maakunta" = "MK", "suuralue" = "SA")
# Get map and modify region variable
map <- sf::st_read(httr::build_url(url), quiet = TRUE)
map[[aluejako]] <- paste0(prefix_name_key[aluejako], map[[aluejako]])
map <- dplyr::rename_with(map, ~paste0(aluejako, "_code"), aluejako)
# Filter required from the input data
output <- map %>%
dplyr::left_join(data, by = paste0(aluejako, "_code")) %>%
ggplot(aes_string(fill = x)) +
geom_sf() +
labs(fill = ifelse(!is.null(codes_names_tiedot),
codes_names_tiedot[x], x))
if(!grid) {
output <- output + theme(panel.grid.major = element_line(colour = "transparent"),
panel.border = element_rect(color = "transparent"),
plot.background = element_rect(color = "transparent")) +
coord_sf(datum = NA)
}
output
}
pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
ptt_draw_map(2020, "TYOTOSUUS")
pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
ptt_draw_map(2020, x =  "TYOTOSUUS")
data_orig <- data
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
head(data)
length(unique(data$kunta_code))
pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
ptt_draw_map(2020, x = "TYOTOSUUS") +
scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
theme(legend.position = "top",
legend.justification = "left")
library(pttdatahaku)
ptt_read_data("tyonv_1001", "seutukunta") %>% ptt_draw_map(x = "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
#'      ptt_draw_map(2020, aluejako = "kunta",  x =  "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "seutukunta") %>%
#'      ptt_draw_map(2020, "seutukunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
#'      ptt_draw_map(2020, x = "TYOTOSUUS") +
#'      scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
#'        theme(legend.position = "top",
#'              legend.justification = "left")
#'
ptt_draw_map <- function(data,
vuosi = substring(max(data$time), 1,4),
aluejako = NULL,
time = max(data$time),
grid = TRUE,
long_data = TRUE) {
if(long_data) {
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
}
if(is.null(aluejako)) {
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
}
if(!is.null(attributes(data)$codes_names$tiedot)) {
codes_names_tiedot <-attributes(data)$codes_names$tiedot
} else {
codes_names_tiedot <- NULL
}
# Get a list of all available maps
capabilities <- xml2::read_xml("https://geo.stat.fi/geoserver/tilastointialueet/wfs?service=WFS&version=2.0.0&request=GetCapabilities")
map_names <- capabilities %>%
xml2::xml_find_all("//wfs:FeatureType/wfs:Name") %>%
xml2::xml_text()
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(vuosi), map_names, value = TRUE),
value = TRUE),
n = 1)
# Test if the search was successful
if(length(file) == 0) {stop("Map not found!")}
url <- httr::parse_url("https://geo.stat.fi/geoserver/tilastointialueet/wfs")
url$query <- list(service ="WFS",
version ="2.0.0",
request ="GetFeature",
typename = file,
outputFormat ="application/json")
prefix_name_key <- c("kunta" = "KU", "seutukunta" = "SK", "maakunta" = "MK", "suuralue" = "SA")
# Get map and modify region variable
map <- sf::st_read(httr::build_url(url), quiet = TRUE)
map[[aluejako]] <- paste0(prefix_name_key[aluejako], map[[aluejako]])
map <- dplyr::rename_with(map, ~paste0(aluejako, "_code"), aluejako)
# Filter required from the input data
output <- map %>%
dplyr::left_join(data, by = paste0(aluejako, "_code")) %>%
ggplot(aes_string(fill = x)) +
geom_sf() +
labs(fill = ifelse(!is.null(codes_names_tiedot),
codes_names_tiedot[x], x))
if(!grid) {
output <- output + theme(panel.grid.major = element_line(colour = "transparent"),
panel.border = element_rect(color = "transparent"),
plot.background = element_rect(color = "transparent")) +
coord_sf(datum = NA)
}
output
}
ptt_read_data("tyonv_1001", "maakunta") %>% ptt_draw_map("TYOTOSUUS")
ptt_read_data("tyonv_1001", "maakunta") %>% ptt_draw_map("TYOTOSUUS", vuosi = 2020)
data <- ptt_read_data("tyonv_1001", "maakunta")
map_year = substring(max(data$time), 1,4)
map_year
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
aluejako
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(map_year), map_names, value = TRUE),
value = TRUE),
n = 1)
file
#' pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
#'      ptt_draw_map(2020, aluejako = "kunta",  x =  "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "seutukunta") %>%
#'      ptt_draw_map(2020, "seutukunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
#'      ptt_draw_map(2020, x = "TYOTOSUUS") +
#'      scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
#'        theme(legend.position = "top",
#'              legend.justification = "left")
#'
ptt_draw_map <- function(data,
map_year = substring(max(data$time), 1,4),
aluejako = NULL,
time = max(data$time),
grid = TRUE,
long_data = TRUE) {
if(long_data) {
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
}
if(is.null(aluejako)) {
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
}
if(!is.null(attributes(data)$codes_names$tiedot)) {
codes_names_tiedot <-attributes(data)$codes_names$tiedot
} else {
codes_names_tiedot <- NULL
}
# Get a list of all available maps
capabilities <- xml2::read_xml("https://geo.stat.fi/geoserver/tilastointialueet/wfs?service=WFS&version=2.0.0&request=GetCapabilities")
map_names <- capabilities %>%
xml2::xml_find_all("//wfs:FeatureType/wfs:Name") %>%
xml2::xml_text()
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(map_year), map_names, value = TRUE),
value = TRUE),
n = 1)
# Test if the search was successful
if(length(file) == 0) {stop("Map not found!")}
url <- httr::parse_url("https://geo.stat.fi/geoserver/tilastointialueet/wfs")
url$query <- list(service ="WFS",
version ="2.0.0",
request ="GetFeature",
typename = file,
outputFormat ="application/json")
prefix_name_key <- c("kunta" = "KU", "seutukunta" = "SK", "maakunta" = "MK", "suuralue" = "SA")
# Get map and modify region variable
map <- sf::st_read(httr::build_url(url), quiet = TRUE)
map[[aluejako]] <- paste0(prefix_name_key[aluejako], map[[aluejako]])
map <- dplyr::rename_with(map, ~paste0(aluejako, "_code"), aluejako)
# Filter required from the input data
output <- map %>%
dplyr::left_join(data, by = paste0(aluejako, "_code")) %>%
ggplot(aes_string(fill = x)) +
geom_sf() +
labs(fill = ifelse(!is.null(codes_names_tiedot),
codes_names_tiedot[x], x))
if(!grid) {
output <- output + theme(panel.grid.major = element_line(colour = "transparent"),
panel.border = element_rect(color = "transparent"),
plot.background = element_rect(color = "transparent")) +
coord_sf(datum = NA)
}
output
}
ptt_read_data("tyonv_1001", "maakunta") %>% ptt_draw_map("TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
#'      ptt_draw_map(2020, aluejako = "kunta",  x =  "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "seutukunta") %>%
#'      ptt_draw_map(2020, "seutukunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
#'      ptt_draw_map(2020, x = "TYOTOSUUS") +
#'      scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
#'        theme(legend.position = "top",
#'              legend.justification = "left")
#'
ptt_draw_map <- function(data,
x,
map_year = substring(max(data$time), 1,4),
aluejako = NULL,
time = max(data$time),
grid = TRUE,
long_data = TRUE) {
if(long_data) {
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
}
if(is.null(aluejako)) {
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
}
if(!is.null(attributes(data)$codes_names$tiedot)) {
codes_names_tiedot <-attributes(data)$codes_names$tiedot
} else {
codes_names_tiedot <- NULL
}
# Get a list of all available maps
capabilities <- xml2::read_xml("https://geo.stat.fi/geoserver/tilastointialueet/wfs?service=WFS&version=2.0.0&request=GetCapabilities")
map_names <- capabilities %>%
xml2::xml_find_all("//wfs:FeatureType/wfs:Name") %>%
xml2::xml_text()
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(map_year), map_names, value = TRUE),
value = TRUE),
n = 1)
# Test if the search was successful
if(length(file) == 0) {stop("Map not found!")}
url <- httr::parse_url("https://geo.stat.fi/geoserver/tilastointialueet/wfs")
url$query <- list(service ="WFS",
version ="2.0.0",
request ="GetFeature",
typename = file,
outputFormat ="application/json")
prefix_name_key <- c("kunta" = "KU", "seutukunta" = "SK", "maakunta" = "MK", "suuralue" = "SA")
# Get map and modify region variable
map <- sf::st_read(httr::build_url(url), quiet = TRUE)
map[[aluejako]] <- paste0(prefix_name_key[aluejako], map[[aluejako]])
map <- dplyr::rename_with(map, ~paste0(aluejako, "_code"), aluejako)
# Filter required from the input data
output <- map %>%
dplyr::left_join(data, by = paste0(aluejako, "_code")) %>%
ggplot(aes_string(fill = x)) +
geom_sf() +
labs(fill = ifelse(!is.null(codes_names_tiedot),
codes_names_tiedot[x], x))
if(!grid) {
output <- output + theme(panel.grid.major = element_line(colour = "transparent"),
panel.border = element_rect(color = "transparent"),
plot.background = element_rect(color = "transparent")) +
coord_sf(datum = NA)
}
output
}
ptt_read_data("tyonv_1001", "maakunta") %>% ptt_draw_map("TYOTOSUUS")
ptt_read_data("tyonv_1001", "seutukunta") %>% ptt_draw_map("TYOTOSUUS")
ptt_read_data("tyonv_1001", "seutukunta") %>% ptt_draw_map("TYOTOSUUS", aluejako = "seutukunta")
#' pttdatahaku::ptt_read_data("tyonv_1001", "kunta") %>%
#'      ptt_draw_map(2020, aluejako = "kunta",  x =  "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "seutukunta") %>%
#'      ptt_draw_map(2020, "seutukunta", "TYOTOSUUS")
#' pttdatahaku::ptt_read_data("tyonv_1001", "maakunta") %>%
#'      ptt_draw_map(2020, x = "TYOTOSUUS") +
#'      scale_fill_gradient(low = "white", high = ggptt_palettes$ptt_new[1]) +
#'        theme(legend.position = "top",
#'              legend.justification = "left")
#'
ptt_draw_map <- function(data,
x,
map_year = substring(max(data$time), 1,4),
aluejako = NULL,
time = max(data$time),
grid = TRUE,
long_data = TRUE) {
if(is.null(aluejako)) {
aluejako <- stringr::str_remove(grep("_code", statficlassifications::detect_region_var(data)$name_key, value = TRUE), "_code")
}
if(!is.null(attributes(data)$codes_names$tiedot)) {
codes_names_tiedot <-attributes(data)$codes_names$tiedot
} else {
codes_names_tiedot <- NULL
}
# Get a list of all available maps
capabilities <- xml2::read_xml("https://geo.stat.fi/geoserver/tilastointialueet/wfs?service=WFS&version=2.0.0&request=GetCapabilities")
map_names <- capabilities %>%
xml2::xml_find_all("//wfs:FeatureType/wfs:Name") %>%
xml2::xml_text()
# Filter the required map from the list of all maps
file <- tail(grep(paste0("tilastointialueet:", tolower(aluejako)),
grep(as.character(map_year), map_names, value = TRUE),
value = TRUE),
n = 1)
# Test if the search was successful
if(length(file) == 0) {stop("Map not found!")}
url <- httr::parse_url("https://geo.stat.fi/geoserver/tilastointialueet/wfs")
url$query <- list(service ="WFS",
version ="2.0.0",
request ="GetFeature",
typename = file,
outputFormat ="application/json")
prefix_name_key <- c("kunta" = "KU", "seutukunta" = "SK", "maakunta" = "MK", "suuralue" = "SA")
# Get map and modify region variable
map <- sf::st_read(httr::build_url(url), quiet = TRUE)
map[[aluejako]] <- paste0(prefix_name_key[aluejako], map[[aluejako]])
map <- dplyr::rename_with(map, ~paste0(aluejako, "_code"), aluejako)
# Filter required from the input data
if(long_data) {
data <- dplyr::filter(data, tiedot_code == x, time == time) %>%
tidyr::spread(tiedot_code, values)
}
output <- map %>%
dplyr::left_join(data, by = paste0(aluejako, "_code")) %>%
ggplot(aes_string(fill = x)) +
geom_sf() +
labs(fill = ifelse(!is.null(codes_names_tiedot),
codes_names_tiedot[x], x))
if(!grid) {
output <- output + theme(panel.grid.major = element_line(colour = "transparent"),
panel.border = element_rect(color = "transparent"),
plot.background = element_rect(color = "transparent")) +
coord_sf(datum = NA)
}
output
}
ptt_read_data("tyonv_1001", "seutukunta") %>% ptt_draw_map("TYOTOSUUS", aluejako = "seutukunta")
ptt_read_data("tyonv_1001", "seutukunta") %>% ptt_draw_map("TYOTOSUUS")
data <- ptt_read_data("tyonv_1001", "seutukunta")
head(data)
unique(data$seutukunta_code)
unique(get_regionkey()$seutukunta_code)
