from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from[2]), "name", sep = "_")
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
df <- dplyr::relocate(df, to)
df
}
codes_to_names(data2) %>% head()
#'
#' @param data
#' @param from
#' @param to
#'
#' @return
#' @export
#'
#' @examples
#'
add_region <- function(data, from = NULL, to) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
recode(data, from_orig = from[1], from = from[2] , to = to, leave = TRUE)
}
head(data)
data %>% add_region(to = "seutukunta")
data %>% add_region(to = "seutukunta_name")
data %>% add_region(to = "seutukunta_name") %>% head()
rm(list = ls())
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
load_all()
head(data)
data %>% add_region("seutukunta_name")
data %>% add_region("seutukunta_name") %>% head()
data %>% add_region("kunta_code") %>% head()
document()
load_all()
sample(letters, 1)
sample(letters, 1)
sample(letters, 4)
sample(letters, 4) %>% paste0
sample(letters, 4) %>% paste0()
paste0(sample(letters, 4))
paste0(sample(letters, 4), collapse = TRUE)
args(paste0)
args(paste)
help(paste)
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste(sample(letters, 4), collapse = "")
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
rename_with(~paste(sample(letters, 4), collapse = ""))
mutate(values = rnorm(n()))
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
dplyr::mutate(values = rnorm(n()))
head(data)
detect_region_var(data)
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
gsub("_.*", "", from[2])
gsub(".*_", "", from[2])
load_all()
head(data)
data %>% add_region("suuralue")
to <- "suuralue"
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
if(!(to %in% c("kunta", "seutukunta", "maakunta", "suuralue"))) {
stop("Argument to has to be either 'kunta', 'seutukunta', 'maakunta' or 'suuralue'")
}
to <- paste(gsub("_.*", "", from[2]), gsub(".*_", "", from[2]))
to
to <- paste(gsub("_.*", "", from[2]), gsub(".*_", "", from[2]), sep = "_")
to
load_all()
data %>% add_region("suuralue")
to
to <- paste(to, gsub(".*_", "", from[2]), sep = "_")
to
to <- "suuralue"
to <- paste(to, gsub(".*_", "", from[2]), sep = "_")
to
load_all()
data %>% add_region("suuralue") %>% head()
document()
library(devtools)
load_all()
key <- get_regionkey(only_names = TRUE, only_codes = TRUE)
library(tidyverse)
key <- get_regionkey(only_names = TRUE, only_codes = TRUE)
key <- get_regionkey(only_names = TRUE, only_codes = TRUE)
document()
devtools:load_all()
devtools::load_all()
data %>% left_join(get_regionkey(only_names = TRUE), by = "kunta_name") %>%
group_by(maakunta_name) %>%
summarize(maakunta_mean = mean(values))
library(tidyverse)
data %>% left_join(get_regionkey(only_names = TRUE), by = "kunta_name") %>%
group_by(maakunta_name) %>%
summarize(maakunta_mean = mean(values))
data %>% left_join(get_regionkey(only_names = TRUE), by = "kunta_name") %>%
group_by(maakunta_name) %>%
summarize(maakunta_mean = mean(values))
get_regionkey() %>% head()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- names_to_codes(data, from = "kunta")
data <- names_to_codes(data)
head(data)
data <- codes_to_names(data)
head(data)
document()
library(devtools)
documnet8)
document()
check()
document()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
library(tidyverse)
library(devtools)
load_all()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
regionkey <- get_regionkey()
var1 <- names(data)[1]
var1
data <- rename(data, alue = kunta_name)
head8data
head(data)
var1 <- names(data)[1]
var1
detect_region_var <- function(data) {
regionkey <- get_regionkey()
i <- 1
j <- 1
for(name_orig in names(data)) {
for(name_key in names(regionkey)) {
if(all(data[[name_orig]] %in% regionkey[[name_key]])) {
from_orig[i] <- name_orig
from_key[j] <- name_key
i <- i + 1
j <- j + 1
return(list(from_orig, from_key))
}
}
}
}
detect_region_var(data)
#' @examples
#'
#'    # Generate random municipal data with random name for the regions
#'              data <- get_regionkey() %>%
#'                      dplyr::select(kunta_name) %>%
#'                      dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
#'                      dplyr::mutate(values = rnorm(n()))
#'
#'              detect_region_var(data)
#'
detect_region_var <- function(data) {
regionkey <- get_regionkey()
i <- 1
j <- 1
from_orig <- numeric()
from_key <- numeric()
for(name_orig in names(data)) {
for(name_key in names(regionkey)) {
if(all(data[[name_orig]] %in% regionkey[[name_key]])) {
from_orig[i] <- name_orig
from_key[j] <- name_key
i <- i + 1
j <- j + 1
return(list(from_orig, from_key))
}
}
}
}
detect_region_var(data)
#' @examples
#'
#'    # Generate random municipal data with random name for the regions
#'              data <- get_regionkey() %>%
#'                      dplyr::select(kunta_name) %>%
#'                      dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
#'                      dplyr::mutate(values = rnorm(n()))
#'
#'              detect_region_var(data)
#'
detect_region_var <- function(data) {
regionkey <- get_regionkey()
i <- 1
j <- 1
from_orig <- numeric()
from_key <- numeric()
for(name_orig in names(data)) {
for(name_key in names(regionkey)) {
if(all(data[[name_orig]] %in% regionkey[[name_key]])) {
from_orig[i] <- name_orig
from_key[j] <- name_key
i <- i + 1
j <- j + 1
return(list(from_orig = from_orig, from_key = from_key))
}
}
}
}
detect_region_var(data)
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- get_regionkey() %>%
dplyr::select(kunta_name, seutukunta_name) %>%
mutate(values = rnorm(n()))
head(data)
data <- rename(data, kunta = kunta_name, Seutukunta = seutukunta_name)
head(data)
detect_region_var(data)
#' @examples
#'
#'    # Generate random municipal data with random name for the regions
#'              data <- get_regionkey() %>%
#'                      dplyr::select(kunta_name) %>%
#'                      dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
#'                      dplyr::mutate(values = rnorm(n()))
#'
#'              detect_region_var(data)
#'
detect_region_var <- function(data) {
regionkey <- get_regionkey()
i <- 1
j <- 1
from_orig <- numeric()
from_key <- numeric()
for(var_orig in names(data)) {
for(var_key in names(regionkey)) {
if(all(data[[var_orig]] %in% regionkey[[var_key]])) {
name_orig[i] <- name_orig
name_key[j] <- name_key
i <- i + 1
j <- j + 1
}
}
}
return(list(name_orig = name_orig, name_key = name_key))
}
detect_region_var(data)
#' @examples
#'
#'    # Generate random municipal data with random name for the regions
#'              data <- get_regionkey() %>%
#'                      dplyr::select(kunta_name) %>%
#'                      dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
#'                      dplyr::mutate(values = rnorm(n()))
#'
#'              detect_region_var(data)
#'
detect_region_var <- function(data) {
regionkey <- get_regionkey()
i <- 1
j <- 1
name_orig <- numeric()
name_key <- numeric()
for(var_orig in names(data)) {
for(var_key in names(regionkey)) {
if(all(data[[var_orig]] %in% regionkey[[var_key]])) {
name_orig[i] <- name_orig
name_key[j] <- name_key
i <- i + 1
j <- j + 1
}
}
}
return(list(name_orig = name_orig, name_key = name_key))
}
detect_region_var(data)
#' @examples
#'
#'    # Generate random municipal data with random name for the regions
#'              data <- get_regionkey() %>%
#'                      dplyr::select(kunta_name) %>%
#'                      dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
#'                      dplyr::mutate(values = rnorm(n()))
#'
#'              detect_region_var(data)
#'
detect_region_var <- function(data) {
regionkey <- get_regionkey()
i <- 1
j <- 1
name_orig <- numeric()
name_key <- numeric()
for(var_orig in names(data)) {
for(var_key in names(regionkey)) {
if(all(data[[var_orig]] %in% regionkey[[var_key]])) {
name_orig[i] <- var_orig
name_key[j] <- var_key
i <- i + 1
j <- j + 1
}
}
}
return(list(name_orig = name_orig, name_key = name_key))
}
detect_region_var(data)
#' @param data data.frame
#' @param from character, variable in the data that is used to add regions to the data. Defaults
#'    to NULL, in which case function tries to guess the variable in the data.
#' @param to character, the region to add.
#'
#' @return
#' @export
#'
#' @examples
#'
add_region <- function(data, to, from = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
if(!(to %in% c("kunta", "seutukunta", "maakunta", "suuralue"))) {
stop("Argument to has to be either 'kunta', 'seutukunta', 'maakunta' or 'suuralue'")
}
to <- paste(to, gsub(".*_", "", from$name_key), sep = "_")
recode_region(data, from_orig = from$name_orig, from = from$name_key , to = to, leave = TRUE)
}
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data %>% add_region("seutukunta") %>% head()
data <- rename(data, Alueet = kunta_name)
data %>% add_region("seutukunta") %>% head()
data <- get_regionkey() %>%
dplyr::select(kunta_name, seutukunta_name) %>%
mutate(values = rnorm(n()))
head(data)
#'
#' @examples
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_code) %>%
#'                mutate(values = rnorm(n()))
#'
#'        codes_to_names(data)
#'
codes_to_names <- function(data, from = NULL, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from$name_key), "name", sep = "_")
recode_region(data, from_orig = from$name_orig, from = from$name_key , to = to, leave = TRUE)
df <- dplyr::relocate(df, to)
df
}
#'
#'#' # Replace municipality names by their codes
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_name) %>%
#'                mutate(values = rnorm(n()))
#'
#'     names_to_codes(data)
#'
names_to_codes <- function(data, from = NULL, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from$name_key), "code", sep = "_")
recode_region(data, from_orig = from$name_orig, from = from$name_key , to = to, leave = TRUE)
df <- dplyr::relocate(df, to)
df
}
names_to_codes(data) %>% head()
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
to <- paste(gsub("_.*", "", from$name_key), "code", sep = "_")
to
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
year <- NULL
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
to
from
from$name_key
from_orig$name_orig
from_orig -< from$name_orig
from_orig <- from$name_orig
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
from
from <- from$name_key
from_oirg
from_orig
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
regionkey
head(regionkey)
regionkey <- dplyr::rename_with(regionkey, ~from_orig, from)
head(regionkey)
df <- dplyr::left_join(data, regionkey, by = from_orig)
head(df)
head(data)
rm(list = ls())
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- get_regionkey() %>%
dplyr::select(kunta_name, seutukunta_name) %>%
mutate(values = rnorm(n()))
head(data)
data %>% names_to_codes() %>% head()
load_all()
data %>% names_to_codes() %>% head()
load_all()
data %>% names_to_codes() %>% head()
data <- rename(data, Alue_kunta = kunta, slue_seutuku = seutukunta)
data <- rename(data, Alue_kunta = kunta_name, slue_seutuku = seutukunta_name)
head(data)
data %>% names_to_codes() %>% head()
data %>% add_region("maakunta") %>% head()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- rbind(data, data.frame(kunta_name = "keksittykunta", values = rnorm(1)))
tail(data)
data %>% add_region("maakunta") %>% head()
regionkey <- get_regionkey()
i <- 1
j <- 1
name_orig <- numeric()
name_key <- numeric()
for(var_orig in names(data)) {
for(var_key in names(regionkey)) {
if(all(data[[var_orig]] %in% regionkey[[var_key]])) {
name_orig[i] <- var_orig
name_key[j] <- var_key
i <- i + 1
j <- j + 1
}
}
}
name_orig
name_key
load_all()
load_all()
data %>% add_region("maakunta") %>% head()
data %>% add_region(data, to = "seutukunta", from  = "kunta_name")
data %>% add_region(to = "seutukunta", from  = "kunta_name")
load_all()
data %>% add_region(to = "seutukunta", from  = "kunta_name")
data %>% add_region(to = "seutukunta", from  = "kunta_name") %>% head()
document()
