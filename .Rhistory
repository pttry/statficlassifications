#' @return
#' @export
#'
#' @examples
#'
#'   search_classifications("ammatti")
#'   search_classifications("ammatti", year = 2021, as_localId = TRUE)
#'
search_classifications <- function(...,
year = NULL,
as_localId = FALSE){
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "classifications"))
search_year <- year
# Filter results by the searchterms
searchterms <- unlist(list(...))
if(length(searchterms) > 0) {
results <- dplyr::filter(results, series %in% searchterms)
}
if(!is.null(year)) {
results <- dplyr::filter(results, year == search_year)
}
# Interrupt of nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- paste0(results$series[i], results$nro[i], results$year[i], results$date[i])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results$series[i], results$year[i])
}
}
# Return.
unique(output)
}
filter_api_results_by_search_terms <- function(df, searchterms) {
library(statficlassifications)
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "classifications"))
results
df <- results
dplyr::filter(df, sapply(1:dim(df)[1], function(i) { all(searchterms %in% c(df[i,c(1,3,5,7)])) }))
#'    search_keys(search_source = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta"
#'    search_keys(source_searchterm = "kunta", target_searchterm = "maakunta")
#'
#' # Search for keys that map "kunta" to "maakunta" for year 2016 and print as localId
#'   search_keys(source_searchterm = "kunta", target_searchterm = "maakunta",
#'               year = 2016, as_localId = TRUE)
#'
#'
search_keys <- function(..., year = NULL,  as_localId = FALSE) {
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
# Filter results by the searchterms
searchterms <- unlist(list(...))
results <-  dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3,5,7)])) }))
# Filter results by year.
if(!is.null(year)) {
results <- dplyr::filter(results, year1 == year | year2 == year)
}
# Interrupt if nothing found.
if(dim(results)[1] == 0) {
return("No search results!")
}
# Format output.
output <- character(dim(results)[1])
if(as_localId) {
for(i in 1:dim(results)[1]) {
output[i] <- create_localId_name(input_vector = results[i,])
}
} else {
for(i in 1:dim(results)[1]) {
output[i] <- paste(results[i, "source"],
results[i, "year1"],
"->",
results[i, "target"],
results[i, "year2"], sep = " ")
}
}
# Return.
unique(output)
}
search_keys("kunta", "seutukunta")
search_keys("kunta", "seutukunta", "2005"
)
search_keys("kunta", "seutukunta", "2013")
search_keys("kunta", "seutukunta", 2013)
head(results)
rm(list  =ls()); gc()
load_all()
search_keys("kunta", "ely")
search_keys()
search_keys("kunta", "maakunta")
search_terms <- c("kunta", "ely")
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- urls_as_localId_df(get_url(classification_service = "correspondenceTables"))
results <-  dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3)])) }))
searchterms <- search_terms
dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3)])) }))
dplyr::filter(results, sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,c(1,3,5,7)])) }))
load_all()
search_keys("kunta")
search_keys("kunta", "ely")
search_keys("kunta", "ely" 2012)
search_keys("kunta", "ely", 2012)
search_classifications("kunta")
search_classifications("kunta", 2016)
search_classifications("ammatti")
search_classifications("ammatti", as_localId = TRUE)
search_keys("kunta", "maakunta", 2010, as_localId = TRUE)
document()
load_all()
search_keys("kunta", "maakunta")
search_keys("kunta", "maakunta", 2016)
load_all()
search_classifications("kunta", 2014)
suppressMessages
load_all()
search_keys("kunta")
search_keys("kunta", "maakunta")
search_classifications("kunta")
load_all()
search_classifications("kunta")
document()
search_keys("kunta", "suuralue", 2020)
install()
library(devtools)
load_all()
load_all()
# Get a list of all correspondence table urls and create a data.frame that isolates the components
# of the endpoints
results <- suppressMessages(urls_as_localId_df(get_url(classification_service = "correspondenceTables")))
results[1:2,]
results[c(TRUE, TRUE),]
df <- data.frame(id = 1:5, x = runif(5))
df
df[c(TRUE, FALSE, TRUE, FALSE, FALSE),]
sapply(1:dim(results)[1],
function(i) { all(searchterms %in% c(results[i,])) }))
search_keys("kunta", "ely")
load_all()
search_keys("kunta", "ely")
load_all()
search_classifications("kunta")
search_classifications("seutukunta")
library(devtools)
get_urls()
load_all()
get_urls()
get_url()
get_url(classification_service = "correspondenceTables")
is_region_name("Kainuu")
load_all()
is_region_name("Kainuu")
load_all()
is_region_name("Kainuu")
is_region_name("kainuu")
load_all()
is_region_name("kainuu")
is_region_name("kainuu", case_sensitive = TRUE)
load_all()
is_region_name("kainuu")
is_region_name("kainuu", case_sensitive = FALSE)
load_all()
is_region_name("kainuu", case_sensitive = FALSE)
load_all()
is_region_code("KU005")
is_region_code("KU006")
is_region_code("KU003")
document()
load_all()
get_regionclassification() -> key
head(key)
dim(key)
get_regionclassification("kunta") -> key
dim(key)
load_all()
get_regionclassification("kunta") -> key
dim(key)
get_regionclassification("kunta", year = 2018) -> key
dim(key)
get_regionclassification("kunta", online = TRUE) -> key
get_regionclassification("kunta", offline = FALSE) -> key
get_regionclassification("kunta", offline = FALSE, year = 2018) -> key
load_all()
get_regionclassification("kunta", offline = FALSE) -> key
head(key)
dim(key)
rm(key)
get_regionclassification("kunta", offline = FALSE) -> key
head(key)
regions <- "kunta"
offline = FALSE
key <- data.frame()
year <- NULL
# If user has not set the year of classification, use the latest available year
if(is.null(year)) {year <- get_latest_year(offline = FALSE)}
load_all()
get_regionclassification("kunta", offline = FALSE) -> key
head(key)
load_all()
document()
library(devtools)
load_all()
get_urls()
get_url()
get_url("classifications"
)
get_url(classification_service = "classifications")
search_classifications()
library(tidyverse)
get_url(classification_service = "classifications") %>% urls_as_localId_df()
get_url(classification_service = "classifications") -> urls
urls
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/classifications/")))
urls
nro <- as.data.frame(matrix(unlist(lapply(urls, stringr::str_extract_all, "_\\d+_")), ncol = 1, byrow = TRUE))
nro
urls
search_classifications("Sijoituslaji", as_localId = TRUE)
search_classifications("Sijoituslaji", as_localId = TRUE) %>% get_classification() -> df
head(df)
df
library(devtools)
check()
install.packages("plyr")
check()
install()
load("C:/Users/juhoa/git_clones/statficlassifications/R/sysdata.rda")
prefix_name_key
rm(prefix_name_key)
check()
check()
load_all()
v <- c("SSS", "KU103", "KU061","SK213", "MK04", "nav9w4t")
codes_to_names(v)
codes_to_names_vct(v)
set_region_codes(v)
v
match_region_codes(21)
match_region_codes("nav9w4t")
numeric_code_to_character(21)
numeric_code_to_character(21, "SK")
is_region_code_with_prefix("nav9w4t")
match_region_codes("nav9w4t")
match_region_codes(21)
match_region_codes(06)
set_region_codes_vct("nav9w4t")
set_region_codes("nav9w4t")
set_region_codes(v)
x <- v
# Test if region codes are set. If yes, return input as such.
if(all(is_region_code_with_prefix(x))) {return(x)}
# Save potential names of the input vector.
x_names <- names(x)
# Find elements of the input vector that are not set.
to_be_set <- !is_region_code_with_prefix(x)
to_be_set
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
year <- NULL
region_level <- NULL
offline <- TRUE
use_char_length_info = NULL
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
new_codes
# Join the new codes to the old codes by giving them names.
names(new_codes) <- x[to_be_set]
new_codes
v
set_region_codes(v)
x[to_be_set]
match_region_codes("SK070")
match_region_codes("21")
match_region_codes("MK21")
set_region_codes(c("21", "15"))
set_region_codes(c("21", "15"), use_char_length_info = TRUE)
# Find non-unique matches and return an error if there are any.
non_uniques <- sapply(new_codes, length) > 1
non_uniques
# Find region codes for which matches could not be found.
not_set <- sapply(new_codes, length) == 0
not_set
# Return information on non-matched region codes.
if(any(not_set)) {
message(paste("Code(s)",
paste(x[not_set], collapse = ", "),
"not recognized as",
paste(region_level, collapse = ","),
"region code(s) and are left as they were."))
}
# Join new names to the input vector.
new_codes[not_set] <- NA
join <- dplyr::left_join(data.frame(old_code = as.character(x)),
data.frame(old_code = names(new_codes),
new_code = unlist(new_codes)),
by = "old_code")
join <- dplyr::mutate(join, new_code = ifelse(is.na(new_code), old_code, new_code))
output <- join$new_code
# Return potential names
names(output) <- x_names
output
x <- v
# Find elements of the input vector that are not set.
to_be_set <- !is_region_code_with_prefix(x)
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
x[to_be_set]
names(new_codes)
# Join the new codes to the old codes by giving them names.
names(new_codes) <- x[to_be_set]
new_codes
to_be_set
x
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
new_codes
# Join the new codes to the old codes by giving them names.
names(new_codes) <- x
new_codes
# Find non-unique matches and return an error if there are any.
non_uniques <- sapply(new_codes, length) > 1
if(any(non_uniques)) {
stop(paste("Code(s)",
paste(names(new_codes)[non_uniques], collapse = ", "),
"are ambiguous. You can restrict the ambiguity by giving regions to region_level argument or try use character length information."))
}
# Find region codes for which matches could not be found.
not_set <- sapply(new_codes, length) == 0
# Return information on non-matched region codes.
if(any(not_set)) {
message(paste("Code(s)",
paste(x[not_set], collapse = ", "),
"not recognized as",
paste(region_level, collapse = ","),
"region code(s) and are left as they were."))
}
# Join new names to the input vector.
new_codes[not_set] <- NA
join <- dplyr::left_join(data.frame(old_code = as.character(x)),
data.frame(old_code = names(new_codes),
new_code = unlist(new_codes)),
by = "old_code")
join <- dplyr::mutate(join, new_code = ifelse(is.na(new_code), old_code, new_code))
output <- join$new_code
# Return potential names
names(output) <- x_names
# Return
output
load_all()
v
set_region_codes(v)
codes_to_names(v)
load_all()
codes_to_names(v)
x <- v
codes_to_names(v, region_codes_check = TRUE)
prefixes <- unique(sapply(unique(x), gsub, pattern = "[^a-zA-Z]", replacement = ""))
prefixes
prefix_to_name("navwt")
prefix_name_key
prefixes
prefixes[prefixes %in% prefix_name_key$prefix]
load_all()
codes_to_names(v)
check()
data <- get_regionkey() %>% dplyr::select(kunta_name) %>% dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>% dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
detect_region_var(data)
region_name_var <- purrr::map_lgl(names(data), function(x) {all(is_region_name(x = data[[x]], year = year, offline = offline,
allow_nonstandard_names = TRUE))})
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
if(all(!(c(region_name_var, region_code_var)))) {
stop("Region variable not automatically detected!")
}
region_name_var <- names(data)[region_name_var]
region_code_var <- names(data)[region_code_var]
region_name_var_level <- unlist(sapply(region_name_var, function(x) detect_region_level_name(data[[x]])))
region_code_var_level <- unlist(sapply(region_code_var, function(x) detect_region_level_code(data[[x]])))
if(length(region_code_var_level) == 0 & length(region_code_var) > 0) {
region_code_var_level <- "alue_code"
} else if(length(region_code_var) > 0) {
region_code_var_level <- paste(region_code_var_level, "code", sep = "_")
}
if(length(region_name_var_level) == 0 & length(region_name_var) > 0) {
region_name_var_level <- "alue_name"
} else if(length(region_name_var) > 0) {
region_name_var_level <- paste(region_name_var_level, "name", sep = "_")
}
output <- c(region_name_var, region_code_var)
names(output) <- c(region_name_var_level, region_code_var_level)
output
rm(list = ls()); gc()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
detect_region_var(data)
is_region_code(data[[1]])
is_region_code(data[[2]])
head(data)
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
year <- NULL
offline <- TRUE
region_name_var <- purrr::map_lgl(names(data), function(x) {all(is_region_name(x = data[[x]], year = year, offline = offline,
allow_nonstandard_names = TRUE))})
region_name_var
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
region_code_var
is_region_code_without_prefix(data[[1]])
region_level <- NULL
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
head(codes)
as.vector(x) %in% codes
x <- data[[1]]
as.vector(x) %in% codes
is_region_code_without_prefix(x)
is_region_code_with_prefix(x)
codes <- as.double(sapply(codes, gsub, pattern = "[^0-9.-]", replacement = ""))
codes
load_all()
is_region_code_without_prefix(x)
is_region_code_without_prefix(NA)
codes <- codes[!is.na(codes)]
codes
load_all()
is_region_code_without_prefix(NA)
check()
data <- get_regionkey("seutukunta") %>%
dplyr::select(seutukunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
# Recode
recode_region(data, "kunta_name", "kunta_name", "kunta_code")
rlang::last_error()
head(data)
data <- get_regionkey("kunta") %>%
dplyr::select(kunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
# Recode
recode_region(data, "kunta_name", "kunta_name", "kunta_code")
head(data)
data <- get_regionkey("kunta") %>%
dplyr::select(kunta_name) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
# Recode
recode_region(data, "kunta_name", "kunta_name", "kunta_code")
# Add seutukunnat to municipal data
recode_region(data, "kunta_name", "kunta_name", "seutukunta_name", year = 2020, leave = TRUE)
check()
install()
library(devtools)
region_level = NULL
year = NULL
offline = TRUE
# Get all standard region codes
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
load_all()
# Get all standard region codes
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
# Remove prefixes from standard region codes
codes <- as.double(sapply(codes, gsub, pattern = "[^0-9.-]", replacement = ""))
codes
na.omit(codes)
x <- "21"
suppressWarnings(as.double(as.vector(x)) %in% codes)
x <- c(21, 15)
suppressWarnings(as.double(as.vector(x)) %in% codes)
as.double(as.vector(x)) %in% codes
load_all()
is_region_code_without_prefix(1:50)
x <- 1:50
as.double(as.vector(x)) %in% codes
document()
