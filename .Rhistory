document()
install()
name_to_prefix("KOKO MAA
")
load_all()
install()
load_all()
name_to_prefix("KOKO MAA
")
name <- "KOKO MAA
"
name <- ifelse(name != "KOKO MAA", tolower(name), name)
name
name != "KOKO MAA"
name <- "KOKO MAA"
name <- ifelse(name != "KOKO MAA", tolower(name), name)
name
load_all()
name_to_prefix(c("maakunta", "seutukunta", "KOKO MAA"))
install()
name_to_prefix("KOKO MAA")
x <- c("maakunta", "KOKO MAA")
name_to_prefix(x)
library(devtools)
library(tidyverse)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
years <- 2007:2020
for(year in years) {
codes_names_key_temp <- purrr::map(regions, get_region_code_name_key, year = year, offline = FALSE) %>%
purrr::map(setNames, c("alue_name", "alue_code")) %>%
plyr::ldply()
codes_names_key <- rbind(codes_names_key, codes_names_key_temp)
print(year)
}
load_all()
for(year in years) {
codes_names_key_temp <- purrr::map(regions, get_region_code_name_key, year = year, offline = FALSE) %>%
purrr::map(setNames, c("alue_name", "alue_code")) %>%
plyr::ldply()
codes_names_key <- rbind(codes_names_key, codes_names_key_temp)
print(year)
}
get_key
key <- get_region_code_name_key("kunta")
head(key)
key <- get_region_code_name_key("seutukunta")
key <- get_region_code_name_key("maakunta")
key <- get_region_code_name_key("suuralue")
key <- get_region_code_name_key("ely")
year
key <- get_region_code_name_key("ely", year = 2007)
key <- get_region_code_name_key("suuralue", year = 2007)
key <- get_region_code_name_key("maakunta", year = 2007)
key <- get_region_code_name_key("seutukunta"m year = 2007)
key <- get_region_code_name_key("seutukunta", year = 2007)
key <- get_region_code_name_key("kunta", year = 2007)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
codes_names_key_temp <- purrr::map(regions, get_region_code_name_key, year = year, offline = FALSE) %>%
purrr::map(setNames, c("alue_name", "alue_code")) %>%
plyr::ldply()
codes_names_key_temp <- purrr::map(regions, get_region_code_name_key, year = year, offline = FALSE)
get_region_code_name_key
get_latest_year(offline = FALSE)
load_all()
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
years <- 2007:2020
for(year in years) {
codes_names_key_temp <- purrr::map(regions, get_region_code_name_key, year = year, offline = FALSE) %>%
purrr::map(setNames, c("alue_name", "alue_code")) %>%
plyr::ldply()
codes_names_key <- rbind(codes_names_key, codes_names_key_temp)
print(year)
}
key <- get_regionkey("kunta", "seutukunta", year = 2007)
year <- 2007
source = "kunta"
targets = "seutukunta"
latest_year <- get_latest_year(offline = offline)
offline = TRUE
l
latest_year <- get_latest_year(offline = offline)
if(is.null(year)) {
year <- latest_year
} else if((year != latest_year & offline)) {
offline <- FALSE
message("Overriding default option for offline regionkey for years other than the latest year.")
}
target_regions <- prefix_name_key$name[-(1:2)]
region_code_prefixes <- prefix_name_key$prefix[-(1:2)]
missed_targets <- logical(length(target_regions))
names(missed_targets) <- target_regions
target_regions
region_code_prefixes
regionkey <- NULL
for(target in target_regions) {
# Create local ID and get key
localId <- create_localId_name("kunta", target, year)
key <- get_key(localId, print_key_name = FALSE)
if(length(key) == 0) {
missed_targets[target] <- TRUE
next
}
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(region_code_prefixes[which(target_regions == target)], key$target_code)
# set the variable names, codes get prefix '_code' and names get prefix '_name'. e.g. '(maa)kunta_name'
# and '(maa)kunta_code'.
names(key) <- c("kunta_code", "kunta_name", paste(target, c("code", "name"), sep = "_"))
if(is.null(regionkey)) {
regionkey <- key
} else {
regionkey <- dplyr::left_join(regionkey, key, by = c("kunta_code", "kunta_name"))
}
}
regionkey
head(regionkey)
target_regions
missed_targets
targets <- target_regions[!missed_targets]
targets
target_regions
target_regions[-"seutukunta"]
target_regions[[-"seutukunta"]]
target_regions[!target_regions %in% "seutukunta"]
target_regions[!(target_regions %in% c(source, targets))]
source
targets
regionkey2 <- regionkey
regionkey3 <- dplyr::select(regionkey, c(paste(c(source, targets), "name", sep = "_"),
paste(c(source, targets), "code", sep = "_")))
head(regionkey3)
regionkey4 <- dplyr::select(regionkey, -paste(target_regions[!(target_regions %in% c(source, targets))], "name", sep = "_"),
-paste(target_regions[!(target_regions %in% c(source, targets))], "code", sep = "_"))
regionkey[,paste(c(source, targets), "name", sep = "_")] %>% head()
targets <- "seutukunta"
regionkey[,paste(c(source, targets), "name", sep = "_")] %>% head()
regionkey[["seutukunta"]]
regionkey[[paste(c(source, targets), "name", sep = "_")]] %>% head()
c(paste(c(source, targets), "name", sep = "_"), paste(c(source, targets), "code", sep = "_"))
missed_targets
target_regions[!missed_targets]
key <- get_regionkey("Kunta", "Maakunta")
any(targets %in% target_regions[missed_targets])
target_regions[missed_targets]
paste0("There is no key from ",
source, " to ",
paste(target_regions[missed_targets], collapse = ", "),
"."))
paste0("There is no key from ",
source, " to ",
paste(target_regions[missed_targets], collapse = ", "),
".")
load_all()
key <- get_regionkey("kunta", "postialue")
key <- get_regionkey("seutukunta", "maakunta", year = 2019)
head(key)
key <- get_regionkey("kunta", "seutukunta", year = 2017)
head(key)
key <- get_regionkey("kunta", "seutukunta", year = 2007)
head(key)
load_all()
key <- get_regionkey("kunta", "seutukunta", year = 2007)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
years <- 2007:2020
for(year in years) {
codes_names_key_temp <- purrr::map(regions, get_region_code_name_key, year = year, offline = FALSE) %>%
purrr::map(setNames, c("alue_name", "alue_code")) %>%
plyr::ldply()
codes_names_key <- rbind(codes_names_key, codes_names_key_temp)
print(year)
}
year
search_classifications("kunta", year = 2007)
search_classifications("kunta", year = 2008)
search_classifications("kunta", year = 2008, as_localId = TRUE)
search_classifications("kunta", year = 2008, as_localId = TRUE) %>% get_classification() -> key
head(key)
search_classifications("kunta", as_localId = TRUE)
args(grep)
grep("kunta", search_classifications("kunta", as_localId = TRUE), value = TRUE)
grep("kunta", search_classifications("kunta", as_localId = TRUE), value = TRUE) %>% grep(pattern = "2012", value = TRUE)
region <- "kunta"
year = 2015
localId <- grep(region,
search_classifications("kunta", as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
localId
key_temp <- get_classification(localId, print_series_name = FALSE)
head(key_temp)=
head(key_temp)
name_to_prefix("kunta")
key_temp$code <- paste0(name_to_prefix(region), key$code)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
head(key_temp)
key <- data.frame()
key <- rbind(key, key_temp)
region <- "seutukunta"
localId <- grep(region,
search_classifications("kunta", as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
year
localId <- grep(region,
search_classifications(region, as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
localId
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
head(key_temp)
c(paste0(regions, "_code"), paste0(regions, "_name"))
regions
regions <- "seutukunta"
c(paste0(regions, "_code"), paste0(regions, "_name"))
load_all()
get_region_code_name_key("kunta") %>% head()
load_all()
get_region_code_name_key("kunta") %>% head()
get_region_code_name_key("seutukunta") %>% head()
get_region_code_name_key("seutukunta", "maakunta") %>% head()
get_region_code_name_key("seutukunta", "maakunta") %>% tail())
get_region_code_name_key("seutukunta", "maakunta") %>% tail()
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
get_region_code_name_key(regions) -> key
head(key)
tail(key)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2007:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
year
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
yaer
year
key_temp <- get_region_code_name_key(regions, year = year)
search_classifications(regions, year = 2008)
load_all()
get_region_code_name_key("ely", year = 2008)
load_all()
get_region_code_name_key("ely", year = 2008)
get_region_code_name_key("ely", year = 2008)
get_region_code_name_key("ely", "seutukunta", year = 2008)
get_region_code_name_key("ely", "seutukunta", year = 2008) %>% key
get_region_code_name_key("ely", "seutukunta", year = 2008) -> key
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
year
region
search_classifications("seutukunta", year = 2010)
get_region_code_name_key("seutukunta", year = 2010)
regions <- "seutukunta"
year = 2010
region <- regions
localId <- grep(region,
search_classifications(region, as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
localId
localId <- "ely_1_20080101"
key_temp <- get_classification(localId, print_series_name = FALSE)
head(key_temp)
load_all()
get_region_code_name_key("kunta", year = 2010)
get_region_code_name_key("seutukunta", year = 2010) -> keky
head(keky)
get_region_code_name_key("seutukunta", "maakunta", year = 2010) -> keky
tail(keky)
head(keky)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
year
region
year <- 2008
key_temp <- get_region_code_name_key(regions, year = year)
get_region_code_name_key(regions, year = year)
key <- data.frame()
for(region in regions) {
# localId <- grep(region,
#                 search_classifications(region, as_localId = TRUE),
#                 value = TRUE) %>%
#            grep(pattern = year, value = TRUE)
# if(length(localId) == 0) {
#   message(paste0("No region name-code key found for ", region, " for year ", year))
#   next
#  }
localId <- paste0(region, "_1_", year, "0101")
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
key <- rbind(key, key_temp)
}
region
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
key_temp
load_all()
key_temp <- get_region_code_name_key(regions, year = year)
head(key_temp)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
head(key)
dim(key)
key <- key[!duplicated, ]
key <- key[!duplicated(key), ]
dim(key)
View(key)
key <- rbind(data.frame(alue_code = "SSS", alue_name = "KOKO MAA"), key)
head(key)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(data.frame(key, alue_code = "SSS", alue_name = "KOKO MAA"))
head(key)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
head(key)
tail(key)
rownames(key) <- NULL
tail(key)
key %>% filter(grepl("Ahven", alue_name))
# Prepare and save general code-name key
# For municipalities, the key also has their codes without prefixes?
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, aluename != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
# Prepare and save general code-name key
# For municipalities, the key also has their codes without prefixes?
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
load_all()
get_region_code_name_key("seutukunta")
get_region_code_name_key("seutukunta", as_named_vector = TRUE)
get_region_code_name_key("seutukunta", "maakunta")
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names(v)
v <- c("SSS", "KU103", "KU061","SK213", "MK04", "nav9w4t")
codes_to_names(v)
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names(f)
grepl("^d+$", "KU213")
grepl("^d+$", "213")
grepl("^\d+$", "213")
grepl("^\\d+$", "213")
grepl("^\\d+$", "SK213")
v
x <- v
grepl("^\\d+$", x)
any(!grepl("^\\d+$", x))
any(grepl("^\\d+$", x)
)
"It appears you are trying to map codes without prefixes to regions. \\n
In this case, same codes may map to multiple regions so there is a risk \\n
errors in mapping. I will start by first trying to fit kunnat to \\n'
to your codes and then seutukunnat, then maakunnat then suuralueet and \\n
then ely-alueet."
"It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \\n
errors in mapping. I will start by first trying to fit kunnat to \\n'
to your codes and then seutukunnat, then maakunnat then suuralueet and \\n
then ely-alueet."
"It appears you are trying to map codes without prefixes to regions.
In this case, same codes may map to multiple regions so there is a risk
errors in mapping. I will start by first trying to fit kunnat to
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet."
cat("It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \n
errors in mapping. I will start by first trying to fit kunnat to \n
to your codes and then seutukunnat, then maakunnat then suuralueet and \n
then ely-alueet.")
cat("It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \n
errors in mapping. I will start by first trying to fit kunnat to \n
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet.")
cat("It appears you are trying to map codes without prefixes to regions.
In this case, same codes may map to multiple regions so there is a risk
errors in mapping. I will start by first trying to fit kunnat to
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet.")
prefix_name_key$prefix[-1:2]
prefix_name_key$prefix[-(1:2)]
prefix_name_key$prefix
prefix_name_key$prefix[prefix_name_key$prefix != "SSS"]
# Create the prefix name correspondence used by the package
key <- c("SSS" = "KOKO MAA",
"KU" = "kunta",
"SK" = "seutukunta",
"MK" = "maakunta",
"SA" = "suuralue",
"ELY" = "ely")
prefix_name_key<- data.frame(prefix = names(key), name = key)
rownames(prefix_name_key) <- NULL
usethis::use_data(prefix_name_key, overwrite = TRUE, internal = TRUE)
load_all()
prefix_name_key$prefix
v
v <- c("KU103", "061")
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x <- v
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x
names(x) <- x_names
statficlassifications::region_code_name_key
load_all()
rm(list = ls())
load_all()
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x <- c("KU103", "061")
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x
output <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x[is.na(output)]
x
is.na(output)
output
prefix <- "KU"
key <- statficlassifications:region_code_name_key
key <- statficlassifications::region_code_name_key
key <- dplyr::filter(key, grepl(prefix, key$alue_code))
key$alue_code <- unlist(sapply(str_extract, key$alue_code, pattern = prefix))
key$alue_code <- unlist(sapply(key$alue_code, str_extract, pattern = prefix))
head(key)
key <- statficlassifications::region_code_name_key
key <- dplyr::filter(key, grepl(prefix, key$alue_code))
key$alue_code <- unlist(sapply(key$alue_code, str_remove, pattern = prefix)
)
head(key)
devtools::install()
