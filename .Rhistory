#'     names_to_codes(data)
#'
names_to_codes <- function(data, from = NULL, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from$name_key), "code", sep = "_")
recode_region(data, from_orig = from$name_orig, from = from$name_key , to = to, leave = TRUE)
df <- dplyr::relocate(df, to)
df
}
names_to_codes(data) %>% head()
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
to <- paste(gsub("_.*", "", from$name_key), "code", sep = "_")
to
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
year <- NULL
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
to
from
from$name_key
from_orig$name_orig
from_orig -< from$name_orig
from_orig <- from$name_orig
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
from
from <- from$name_key
from_oirg
from_orig
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
regionkey
head(regionkey)
regionkey <- dplyr::rename_with(regionkey, ~from_orig, from)
head(regionkey)
df <- dplyr::left_join(data, regionkey, by = from_orig)
head(df)
head(data)
rm(list = ls())
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- get_regionkey() %>%
dplyr::select(kunta_name, seutukunta_name) %>%
mutate(values = rnorm(n()))
head(data)
data %>% names_to_codes() %>% head()
load_all()
data %>% names_to_codes() %>% head()
load_all()
data %>% names_to_codes() %>% head()
data <- rename(data, Alue_kunta = kunta, slue_seutuku = seutukunta)
data <- rename(data, Alue_kunta = kunta_name, slue_seutuku = seutukunta_name)
head(data)
data %>% names_to_codes() %>% head()
data %>% add_region("maakunta") %>% head()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- rbind(data, data.frame(kunta_name = "keksittykunta", values = rnorm(1)))
tail(data)
data %>% add_region("maakunta") %>% head()
regionkey <- get_regionkey()
i <- 1
j <- 1
name_orig <- numeric()
name_key <- numeric()
for(var_orig in names(data)) {
for(var_key in names(regionkey)) {
if(all(data[[var_orig]] %in% regionkey[[var_key]])) {
name_orig[i] <- var_orig
name_key[j] <- var_key
i <- i + 1
j <- j + 1
}
}
}
name_orig
name_key
load_all()
load_all()
data %>% add_region("maakunta") %>% head()
data %>% add_region(data, to = "seutukunta", from  = "kunta_name")
data %>% add_region(to = "seutukunta", from  = "kunta_name")
load_all()
data %>% add_region(to = "seutukunta", from  = "kunta_name")
data %>% add_region(to = "seutukunta", from  = "kunta_name") %>% head()
document()
library(devtools)
usethis:use_data_raw
usethis::use_data_raw()
load_all()
search_keys()
library(tidyverse)
search_keys()
search_keys("nuts")
search_keys("nuts", as_localID = TRUE)[9] -> localID
localID
nuts_key <- get_key(localID)
nuts_key
head(nuts_key)
get_latest_year()
regionkey <- get_regionkey()
head(regionkey)
usethis::use_data(regionkey, overwrite = TRUE)
dim(regionkey)
load_all()
key <- get_regionkey()
load_all()
regionkey <- get_regionkey()
head(regionkey)
data(regionkey)
head(regionkey)
load_all()
load_all()
data <- get_regionkey() %>% select(kunta_name) %>% mutate(values = rnorm(310)
)
head(data)
data <- rename(data, alue = kunta_name)
head(data)
detect_region_var(data)
data %>% add_region("suuralue") %>% head()
search_keys()
ely_key <- get_key(search_keys(as_localID = TRUE)[120])
head(ely_key)
load_all()
key <- get_regionkey()
key <- get_regionkey(offline = FALSE)
head(key)
## Get and save regionkey for offline use and faster functions.
regionkey <- get_regionkey(offline = FALSE)
usethis::use_data(regionkey, overwrite = TRUE)
document()
load_all()
library(pxweb)
url <- "http://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/tym/tyonv/kk/statfin_tyonv_pxt_1001.px"
query <-
list("Alue"=c("*"),
"Kuukausi"= c("*"),
"Tiedot"=c("TYOTTOMAT","TYOVOIMA","AVPAIKAT"))
# Hae data
data <- as.data.frame(pxweb::pxweb_get(url, query))
# Clean data
data <- data %>%
statfitools::clean_times2() %>%
statfitools::clean_names()
check_region_classifications <- function(data) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- data_kunta[!duplicated(data_kunta),]
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning("Problem with region classification!", .call = FALSE)
} else {message("Classification ok!")}
}
check_region_classifications(data)
data <- pttdatahaku::ptt_get_statfi(url, query)
check_region_classifications(data)
check_region_classifications <- function(data) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- classification_in_data[!duplicated(classification_in_data),]
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning("Problem with region classification!", .call = FALSE)
} else {message("Classification ok!")}
}
check_region_classifications(data)
head(data)
data2 <- filter(data, !grepl("ELY", alue_code))
check_region_classifications(data2)
data <- get_regionkey() %>% select(kunta_name) %>% mutate(values = rnorm(310))
head(data)
data <- get_regionkey() %>% select(kunta_name, kunta_code) %>% mutate(values = rnorm(310))
head(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- classification_in_data[!duplicated(classification_in_data),]
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste("Problem with the classification, names or codes of region(s)" prefix_to_name(status)), .call = FALSE)
} else if(!suppress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- classification_in_data[!duplicated(classification_in_data),]
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)" prefix_to_name[status]), .call = FALSE)
} else if(!suppress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- classification_in_data[!duplicated(classification_in_data),]
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!suppress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
head(data)
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes
data <- rename(data, alue_name = kunta_name, alue_code = kunta_code)
check_region_classifications(data)
head(data)
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
code_prefixes
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
prefix <- code_prefixes[1]
prefix
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- classification_in_data[!duplicated(classification_in_data),]
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
classification_in_data
classification_in_key
all(classification_in_data$alue %in% classification_in_key$alue)
classification_in_key$alue
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_key
classification_in_data
classification_in_data <- classification_in_data[!duplicated(classification_in_data),]
classification_in_data
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_")
classification_in_data <- classification_in_data[!duplicated(classification_in_data)]
classification_in_data <- filter(!duplicated(classification_in_data))
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
classification_in_data
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!suppress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications(data, supress_ok_message = FALSE)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
head(data)
data[1,2] <- "KU021"
head(data)
check_region_classifications(data, supress_ok_message = FALSE)
data <- get_regionkey() %>% select(kunta_name, kunta_code) %>% mutate(values = rnorm(310))
head(data)
data <- mutate(across(is.factor), as.character)
data <- data %>% mutate(across(is.factor), as.character)
data <- data %>% mutate_at(is.factor, as.character)
data <- mutate(data, alue_name <- as.character(alue_name))
head(data)
data <- rename(data, alue_name = kunta_name, alue_code = kunta_code)
data <- mutate(data, alue_name <- as.character(alue_name))
glimpse(data)
data <- get_regionkey() %>% select(kunta_name, kunta_code) %>% mutate(values = rnorm(310))
data <- rename(data, alue_name = kunta_name, alue_code = kunta_code)
data <- mutate(data, alue_name = as.character(alue_name))
head(data)
data <- mutate(data, alue_code = as.character(alue_code))
head(data)
data[1,2] <- "KU021"
head(data)
check_region_classifications(data)
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
status
prefix_to_name
prefix_to_name[names(status)][!status]
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[names(status)][!status]), .call = FALSE)
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[names(status)][!status]))
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s) ",
paste0(prefix_to_name[names(status)][!status], collapse = ", ")))
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
library(devtools)
load_all()
search_keys("manner")
library(tidyverse)
search_keys("manner")
