target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
head(key)
hallintoalueet_codes <- c("SK", "MK", "SA")
key$source_code <- paste0("KU", key$source_code)
head(key)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
head(key)
assign(paste(target_region, "key", sep = "_"), key)
target_region <- hallintoalueet[2]
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
target_code = key$targetItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
head(key)
load_all()
key <- get_regionkey(codes = TRUE, year = 2020)
head(key)
alueet <- factor(c("kunta", "seutukunta", "maakunta", "suuralue"), levels = c("kunta", "seutukunta", "maakunta", "suuralue"))
hallintoalueet <- c("seutukunta", "maakunta", "suuralue")
hallintoalueet_codes <- c("SK", "MK", "SA")
source_region = "kunta"
hallintoaluekey <- data.frame()
for(target_region in hallintoalueet) {
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
target_code = key$targetItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
assign(paste(target_region, "key", sep = "_"), key)
}
hallintoaluekey <- dplyr::left_join(seutukunta_key, maakunta_key, by = c("source_code", "source_name"))
hallintoaluekey <- dplyr::left_join(hallintoaluekey, suuralue_key, by = c("source_code", "source_name"))
head(hallintoaluekey)
head(seutukunta_key)
head(maakunta_key)
c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
target_region <- hallintoalueet[1]
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
target_code = key$targetItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
head(key)
c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
head(key)
c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
names(key) <- c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
assign(paste(target_region, "key", sep = "_"), key)
head(key)
target_region <- hallintoalueet[2]
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
names(key) <- c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
assign(paste(target_region, "key", sep = "_"), key)
head(key)
alueet <- factor(c("kunta", "seutukunta", "maakunta", "suuralue"), levels = c("kunta", "seutukunta", "maakunta", "suuralue"))
hallintoalueet <- c("seutukunta", "maakunta", "suuralue")
hallintoalueet_codes <- c("SK", "MK", "SA")
source_region = "kunta"
hallintoaluekey <- data.frame()
for(target_region in hallintoalueet) {
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
key <- fix_encoding(key)
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
names(key) <- c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
assign(paste(target_region, "key", sep = "_"), key)
}
hallintoaluekey <- dplyr::left_join(seutukunta_key, maakunta_key, by = c("source_code", "source_name"))
hallintoaluekey <- dplyr::left_join(seutukunta_key, maakunta_key, by = c("kunta_code", "kunta_name"))
hallintoaluekey <- dplyr::left_join(hallintoaluekey, suuralue_key, by = c("kunta_code", "kunta_name"))
head(hallintoaluekey)
load_all()
key <- get_regionkey(year = 2020)
load_all()
key <- get_regionkey(year = 2020)
head(key)
key <- get_regionkey(year = 2020, only_codes = TRUE)
head(key)
key <- get_regionkey(year = 2020, only_names = TRUE)
head(key)
ls("package:statfitools")
sf_code2name
sf_recode
sf_get_class
help("sf_recode")
head(key)
key <- get_regionkey(year = 2020)
head(key)
df <- data.frame(kunta_code = key$kuntakode, values = rnorm(310))
df <- data.frame(kunta_code = key$kunta_code, values = rnorm(310))
head(df)
region = "kunta"
select(get_regionkey(region = region, year = year), contains(region))
dplyr::select(get_regionkey(region = region, year = year), contains(region)),
dplyr::select(get_regionkey(region = region, year = year), contains(region))
dplyr::select(get_regionkey(region = region, year = year), paste(region, c("code", "name")))
dplyr::select(get_regionkey(region = region, year = year), paste(region, c("code", "name"), sep = "_"))
data <- df
df <-  dplyr::left_join(data,
dplyr::select(get_regionkey(region = region, year = year), paste(region, c("code", "name"), sep = "_")),
by = paste0(region, "_code"))
head(df)
args(left_join)
args(dplyr::left_join)
help("dplyr::left_join")
library(tidyverse)
help("left_join")
args(dplyr::select)
codes2names <- function(data, region, year) {
df <-  dplyr::left_join(data,
dplyr::select(get_regionkey(region = region, year = year), paste(region, c("code", "name"), sep = "_")),
by = paste0(region, "_code")) %>%
dplyr::select(-paste(region, "code"))
}
head(data)
df <- codes2names(data, "kunta", 2020)
codes2names <- function(data, region, year) {
df <-  dplyr::left_join(data,
dplyr::select(get_regionkey(region = region, year = year), paste(region, c("code", "name"), sep = "_")),
by = paste0(region, "_code")) %>%
dplyr::select(-paste(region, "code", sep = "_"))
}
df <- codes2names(data, "kunta", 2020)
head(df)
recode <- function(data, from, to, year) {
if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
df <- dplyr::left_join(data,
select(get_regionkey(year = year), from, to),
by = from)
if(leave = FALSE) {
df <- dplyr::select(-from)
}
df
}
recode <- function(data, from, to, year) {
if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
df <- dplyr::left_join(data,
select(get_regionkey(year = year), from, to),
by = from)
if(leave = FALSE) {
df <- dplyr::select(-from)
}
df
}
recode <- function(data, from, to, year, leave = FALSE) {
if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
df <- dplyr::left_join(data,
select(get_regionkey(year = year), from, to),
by = from)
if(leave == FALSE) {
df <- dplyr::select(-from)
}
df
}
df
head(data)
df <- recode(data, "kunta_code", "kunta_name")
df <- recode(data, "kunta_code", "kunta_name", year = 2020)
from <- "kunta_code"
recode <- function(data, from, to, year, leave = FALSE) {
if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
df <- dplyr::left_join(data,
select(get_regionkey(year = year), from, to),
by = from)
if(leave == FALSE) {
df <- dplyr::select(df, -from)
}
df
}
df <- recode(data, "kunta_code", "kunta_name", year = 2020)
head(df)
head(data)
#'
#' @param data data.frame
#' @param region character
#' @param year integer
#'
#' @return
#' @export
#'
#' @examples
#'
codes_to_names <- function(data, region, year) {
if(!(region %in% c("kunta", "seutukunta", "maakunta", "suuralue"))) {
stop("Argument 'region' has to be one of the following: 'kunta', 'seutukunta', 'maakunta' or 'suuralue")
}
recode(data, from = paste(region, "code", sep = "_"), to = paste(region, "name", sep = "_"), year = year)
}
df <- codes_to_names(data, "kunta", year = 2020)
head(df)
head(data)
#' @param data
#' @param from
#' @param to
#' @param year
#' @param leave
#'
#' @return
#' @export
#'
#' @examples
recode <- function(data, from, to, year, leave = FALSE) {
if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
df <- dplyr::left_join(data,
select(get_regionkey(year = year), from, to),
by = from)
df <- dplyr::select(to, everything())
if(leave == FALSE) {
df <- dplyr::select(df, -from)
}
df
}
df <- codes_to_names(data, "kunta", year = 2020)
#' @param data
#' @param from
#' @param to
#' @param year
#' @param leave
#'
#' @return
#' @export
#'
#' @examples
recode <- function(data, from, to, year, leave = FALSE) {
if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
df <- dplyr::left_join(data,
select(get_regionkey(year = year), from, to),
by = from)
df <- dplyr::select(df, to, everything())
if(leave == FALSE) {
df <- dplyr::select(df, -from)
}
df
}
df <- codes_to_names(data, "kunta", year = 2020)
head(df)
head(data)
document()
rm(list = ls())
gc()
document()
load_all()
library(devtools)
help("install_github")
auth_token <- "git: https://github.com/ on DESKTOP-6BIRGGR at 21-Jun-2019 14:59"
install_github("pttry/pttdatahaku", auth_token = auth_token)
pxweb_print_full_query <- function(url){
meta <- pxweb::pxweb_get(url)
codes <- sapply(meta$variables, "[[", "code")
query_list <- as.list(rep("*", times = length(codes)))
names(query_list) <- codes
pxq <- pxweb::pxweb_query(query_list)
full_query <- pxweb:::pxweb_add_metadata_to_query(pxq, meta)
cat(pxweb:::pxweb_query_as_rcode(full_query), sep ="\n")
}
pxweb_print_full_query("http://pxnet2.stat.fi/PXWeb/pxweb/fi/StatFin/StatFin__tym__tyonv__kk/statfin_tyonv_pxt_1001.px/")
pxweb_print_full_query("http://pxnet2.stat.fi/PXWeb/pxweb/fi/StatFin/StatFin__tym__tyonv__kk/statfin_tyonv_pxt_1001.px")
pxweb_print_full_query("StatFin__tym__tyonv__kk/statfin_tyonv_pxt_1001.px")
pxweb_print_full_query(url = statfi_url("StatFin", "StatFin__tym__tyonv__kk/statfin_tyonv_pxt_1001.px")
)
library(pxweb)
ls("package:pxweb")
"px_code_name" %in% ls("package:pxweb")
"px_code_name" %in% ls("package:statfitools")
library(statfitools)
"px_code_name" %in% ls("package:statfitools")
url <- "http://pxnet2.stat.fi/PXWeb/api/v1/fi/StatFin/tym/tyonv/kk/statfin_tyonv_pxt_1001.px"
query <-
list("Alue"=c("*"),
"Kuukausi"= c("*"),
"Tiedot"=c("TYOTTOMAT","TYOVOIMA","AVPAIKAT"))
px_data <- pxweb::pxweb_get(url = url, query = query)
px_data
px_code_name <- function(px_data){
purrr::map(rlang::set_names(px_data$pxweb_metadata$variables,
sapply(px_data$pxweb_metadata$variables, "[[", "code")),
~rlang::set_names(.x$valueTexts, .x$values))
}
statfi_url <- function(..., .base_url = "http://pxnet2.stat.fi/PXWeb/api/v1/fi"){
file.path(.base_url, ..., fsep = "/")
}
codes_names <- px_code_name(px_data)
codes_names
px_df <- as.data.frame(px_data, column.name.type = "code",
variable.value.type = "code") %>%
statfitools::clean_times2()
library(tidyverse)
px_df <- as.data.frame(px_data, column.name.type = "code",
variable.value.type = "code") %>%
statfitools::clean_times2()
head(px_df)
clean_times2
.First <- function() {
options(
repos = c(CRAN = "https://cran.rstudio.com/",
jhuovari = "https://jhuovari.github.io/drat/"),
browserNLdisabled = TRUE,
deparse.max.lines = 2,
max.print = 1000
)
}
.First()
install.packages("statafitools")
install.packages("statfitools")
install.packages("statfitools")
library(statfitools)
clean_times2
ls("packages:statfitool")
ls("packages:statfitools")
ls("package:statfitools")
install_github("pttry/statfitools")
devtools::install_github("pttry/statfitools")
detach(statfitools)
detach("statfitools")
detach("package:statfitools")
devtools::install_github("pttry/statfitools")
library(statfitools)
clean_times2
search()
ls("package:statfitools")
library(statitools)
library(statfitools)
clean_times2
library(pxweb)
help("relocate")
df <- tibble(a = 1, b = 1, c = 1, d = "a", e = "a", f = "a")
library(tidyverse)
df <- tibble(a = 1, b = 1, c = 1, d = "a", e = "a", f = "a")
df
relocate(df, f)
df %>% relocate(a, .after = c)
library(devtools)
load_all()
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_name) %>%
#'                mutate(values = rnorm(n()))
head(data)
data <- get_regionkey(year = 2020) %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
head(data)
recode(data, "kunta_name", "kunta_code")
recode(data, "kunta_name", "kunta_code", year = 2020)
recode(data, "kunta_name", "seutukunta_name", year = 2020)
recode(data, "kunta_name", "seutukunta_name", year = 2020, leave = TRUE)
names_to_codes(data, region = "kunta", year = 2020)
data <- get_regionkey(year = 2020) %>%
dplyr::select(kunta_code) %>%
mutate(values = rnorm(n()))
head(data)
codes_to_names(data, region = "kunta", year = 2020)
regionkey <- get_regionkey(year = 2020)
regionkey
head(regionkey)
glimpse(regionkey)
alueet <- factor(c("kunta", "seutukunta", "maakunta", "suuralue"), levels = c("kunta", "seutukunta", "maakunta", "suuralue"))
hallintoalueet <- c("seutukunta", "maakunta", "suuralue")
hallintoalueet_codes <- c("SK", "MK", "SA")
source_region = "kunta"
hallintoaluekey <- data.frame()
target_region <- hallintoalueet[1]
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
year <- 2020
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
glimpse(key)
key <- mutate(key, as.factor)
key <- dplyr::mutate_all(key, as.factor)
glimpse(key)
# There are encoding errors, fix these.
key <- fix_encoding(key)
glimpse(key)
get_regionkey <- function(region = "kunta", only_codes = FALSE, only_names = FALSE, year) {
alueet <- factor(c("kunta", "seutukunta", "maakunta", "suuralue"), levels = c("kunta", "seutukunta", "maakunta", "suuralue"))
hallintoalueet <- c("seutukunta", "maakunta", "suuralue")
hallintoalueet_codes <- c("SK", "MK", "SA")
source_region = "kunta"
hallintoaluekey <- data.frame()
for(target_region in hallintoalueet) {
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
# There are encoding errors, fix these.
key <- fix_encoding(key)
key <- dplyr::mutate_all(key, as.factor)
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
# set the variable names, codes get prefix '_code' and names get prefix '_name'. e.g. '(maa)kunta_name'
# and '(maa)kunta_code'.
names(key) <- c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
assign(paste(target_region, "key", sep = "_"), key)
}
regionkey <- dplyr::left_join(seutukunta_key, maakunta_key, by = c("kunta_code", "kunta_name"))
regionkey <- dplyr::left_join(regionkey, suuralue_key, by = c("kunta_code", "kunta_name"))
if(only_codes) {
regionkey <- dplyr::select(regionkey, contains("code"))
} else if(only_names) {
regionkey <- dplyr::select(regionkey, contains("name"))
}
regionkey <- regionkey[,as.double(alueet[alueet == region]) <= as.double(alueet)]
regionkey[!duplicated(regionkey),]
}
regionkey <- get_regionkey(year = 2020)
head(regionkey)
glimpse(regionkey)
get_regionkey <- function(region = "kunta", only_codes = FALSE, only_names = FALSE, year) {
alueet <- factor(c("kunta", "seutukunta", "maakunta", "suuralue"), levels = c("kunta", "seutukunta", "maakunta", "suuralue"))
hallintoalueet <- c("seutukunta", "maakunta", "suuralue")
hallintoalueet_codes <- c("SK", "MK", "SA")
source_region = "kunta"
hallintoaluekey <- data.frame()
for(target_region in hallintoalueet) {
table <- create_localID_name(source_region, target_region, year)
key <- get_correspondencetable(table)
key <- data.frame(source_code = key$sourceItem$code,
source_name = unlist(lapply(key$sourceItem$classificationItemNames, '[', "name")),
target_code = key$targetItem$code,
target_name = unlist(lapply(key$targetItem$classificationItemNames, '[', "name")))
# There are encoding errors, fix these.
key <- fix_encoding(key)
# The codes in classification tables have only the numbers, not the region marker (e.g. MK, SK). Add
# these region markers.
key$source_code <- paste0("KU", key$source_code)
key$target_code <- paste0(hallintoalueet_codes[which(hallintoalueet == target_region)], key$target_code)
# set the variable names, codes get prefix '_code' and names get prefix '_name'. e.g. '(maa)kunta_name'
# and '(maa)kunta_code'.
names(key) <- c("kunta_code", "kunta_name", paste(target_region, c("code", "name"), sep = "_"))
assign(paste(target_region, "key", sep = "_"), key)
}
regionkey <- dplyr::left_join(seutukunta_key, maakunta_key, by = c("kunta_code", "kunta_name"))
regionkey <- dplyr::left_join(regionkey, suuralue_key, by = c("kunta_code", "kunta_name"))
if(only_codes) {
regionkey <- dplyr::select(regionkey, contains("code"))
} else if(only_names) {
regionkey <- dplyr::select(regionkey, contains("name"))
}
regionkey <- regionkey[,as.double(alueet[alueet == region]) <= as.double(alueet)]
regionkey[!duplicated(regionkey),]
dplyr::mutate_all(regionkey, as.factor)
}
regionkey <- get_regionkey(year = 2020)
glimpse(regionkey)
