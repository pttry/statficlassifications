search_classifications()
library(tidyverse)
get_url(classification_service = "classifications") %>% urls_as_localId_df()
get_url(classification_service = "classifications") -> urls
urls
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/classifications/")))
urls
nro <- as.data.frame(matrix(unlist(lapply(urls, stringr::str_extract_all, "_\\d+_")), ncol = 1, byrow = TRUE))
nro
urls
search_classifications("Sijoituslaji", as_localId = TRUE)
search_classifications("Sijoituslaji", as_localId = TRUE) %>% get_classification() -> df
head(df)
df
library(devtools)
check()
install.packages("plyr")
check()
install()
load("C:/Users/juhoa/git_clones/statficlassifications/R/sysdata.rda")
prefix_name_key
rm(prefix_name_key)
check()
check()
load_all()
v <- c("SSS", "KU103", "KU061","SK213", "MK04", "nav9w4t")
codes_to_names(v)
codes_to_names_vct(v)
set_region_codes(v)
v
match_region_codes(21)
match_region_codes("nav9w4t")
numeric_code_to_character(21)
numeric_code_to_character(21, "SK")
is_region_code_with_prefix("nav9w4t")
match_region_codes("nav9w4t")
match_region_codes(21)
match_region_codes(06)
set_region_codes_vct("nav9w4t")
set_region_codes("nav9w4t")
set_region_codes(v)
x <- v
# Test if region codes are set. If yes, return input as such.
if(all(is_region_code_with_prefix(x))) {return(x)}
# Save potential names of the input vector.
x_names <- names(x)
# Find elements of the input vector that are not set.
to_be_set <- !is_region_code_with_prefix(x)
to_be_set
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
year <- NULL
region_level <- NULL
offline <- TRUE
use_char_length_info = NULL
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
new_codes
# Join the new codes to the old codes by giving them names.
names(new_codes) <- x[to_be_set]
new_codes
v
set_region_codes(v)
x[to_be_set]
match_region_codes("SK070")
match_region_codes("21")
match_region_codes("MK21")
set_region_codes(c("21", "15"))
set_region_codes(c("21", "15"), use_char_length_info = TRUE)
# Find non-unique matches and return an error if there are any.
non_uniques <- sapply(new_codes, length) > 1
non_uniques
# Find region codes for which matches could not be found.
not_set <- sapply(new_codes, length) == 0
not_set
# Return information on non-matched region codes.
if(any(not_set)) {
message(paste("Code(s)",
paste(x[not_set], collapse = ", "),
"not recognized as",
paste(region_level, collapse = ","),
"region code(s) and are left as they were."))
}
# Join new names to the input vector.
new_codes[not_set] <- NA
join <- dplyr::left_join(data.frame(old_code = as.character(x)),
data.frame(old_code = names(new_codes),
new_code = unlist(new_codes)),
by = "old_code")
join <- dplyr::mutate(join, new_code = ifelse(is.na(new_code), old_code, new_code))
output <- join$new_code
# Return potential names
names(output) <- x_names
output
x <- v
# Find elements of the input vector that are not set.
to_be_set <- !is_region_code_with_prefix(x)
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
x[to_be_set]
names(new_codes)
# Join the new codes to the old codes by giving them names.
names(new_codes) <- x[to_be_set]
new_codes
to_be_set
x
# Match the not-set region codes to region codes in classifications.
new_codes <- match_region_codes(x, offline = offline,
year = year,
region_level = region_level,
use_char_length_info = use_char_length_info,
suppress_message = TRUE)
new_codes
# Join the new codes to the old codes by giving them names.
names(new_codes) <- x
new_codes
# Find non-unique matches and return an error if there are any.
non_uniques <- sapply(new_codes, length) > 1
if(any(non_uniques)) {
stop(paste("Code(s)",
paste(names(new_codes)[non_uniques], collapse = ", "),
"are ambiguous. You can restrict the ambiguity by giving regions to region_level argument or try use character length information."))
}
# Find region codes for which matches could not be found.
not_set <- sapply(new_codes, length) == 0
# Return information on non-matched region codes.
if(any(not_set)) {
message(paste("Code(s)",
paste(x[not_set], collapse = ", "),
"not recognized as",
paste(region_level, collapse = ","),
"region code(s) and are left as they were."))
}
# Join new names to the input vector.
new_codes[not_set] <- NA
join <- dplyr::left_join(data.frame(old_code = as.character(x)),
data.frame(old_code = names(new_codes),
new_code = unlist(new_codes)),
by = "old_code")
join <- dplyr::mutate(join, new_code = ifelse(is.na(new_code), old_code, new_code))
output <- join$new_code
# Return potential names
names(output) <- x_names
# Return
output
load_all()
v
set_region_codes(v)
codes_to_names(v)
load_all()
codes_to_names(v)
x <- v
codes_to_names(v, region_codes_check = TRUE)
prefixes <- unique(sapply(unique(x), gsub, pattern = "[^a-zA-Z]", replacement = ""))
prefixes
prefix_to_name("navwt")
prefix_name_key
prefixes
prefixes[prefixes %in% prefix_name_key$prefix]
load_all()
codes_to_names(v)
check()
data <- get_regionkey() %>% dplyr::select(kunta_name) %>% dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>% dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
detect_region_var(data)
region_name_var <- purrr::map_lgl(names(data), function(x) {all(is_region_name(x = data[[x]], year = year, offline = offline,
allow_nonstandard_names = TRUE))})
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
if(all(!(c(region_name_var, region_code_var)))) {
stop("Region variable not automatically detected!")
}
region_name_var <- names(data)[region_name_var]
region_code_var <- names(data)[region_code_var]
region_name_var_level <- unlist(sapply(region_name_var, function(x) detect_region_level_name(data[[x]])))
region_code_var_level <- unlist(sapply(region_code_var, function(x) detect_region_level_code(data[[x]])))
if(length(region_code_var_level) == 0 & length(region_code_var) > 0) {
region_code_var_level <- "alue_code"
} else if(length(region_code_var) > 0) {
region_code_var_level <- paste(region_code_var_level, "code", sep = "_")
}
if(length(region_name_var_level) == 0 & length(region_name_var) > 0) {
region_name_var_level <- "alue_name"
} else if(length(region_name_var) > 0) {
region_name_var_level <- paste(region_name_var_level, "name", sep = "_")
}
output <- c(region_name_var, region_code_var)
names(output) <- c(region_name_var_level, region_code_var_level)
output
rm(list = ls()); gc()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
detect_region_var(data)
is_region_code(data[[1]])
is_region_code(data[[2]])
head(data)
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
year <- NULL
offline <- TRUE
region_name_var <- purrr::map_lgl(names(data), function(x) {all(is_region_name(x = data[[x]], year = year, offline = offline,
allow_nonstandard_names = TRUE))})
region_name_var
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
region_code_var
is_region_code_without_prefix(data[[1]])
region_level <- NULL
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
head(codes)
as.vector(x) %in% codes
x <- data[[1]]
as.vector(x) %in% codes
is_region_code_without_prefix(x)
is_region_code_with_prefix(x)
codes <- as.double(sapply(codes, gsub, pattern = "[^0-9.-]", replacement = ""))
codes
load_all()
is_region_code_without_prefix(x)
is_region_code_without_prefix(NA)
codes <- codes[!is.na(codes)]
codes
load_all()
is_region_code_without_prefix(NA)
check()
data <- get_regionkey("seutukunta") %>%
dplyr::select(seutukunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
# Recode
recode_region(data, "kunta_name", "kunta_name", "kunta_code")
rlang::last_error()
head(data)
data <- get_regionkey("kunta") %>%
dplyr::select(kunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
# Recode
recode_region(data, "kunta_name", "kunta_name", "kunta_code")
head(data)
data <- get_regionkey("kunta") %>%
dplyr::select(kunta_name) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
# Recode
recode_region(data, "kunta_name", "kunta_name", "kunta_code")
# Add seutukunnat to municipal data
recode_region(data, "kunta_name", "kunta_name", "seutukunta_name", year = 2020, leave = TRUE)
check()
install()
library(devtools)
region_level = NULL
year = NULL
offline = TRUE
# Get all standard region codes
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
load_all()
# Get all standard region codes
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
# Remove prefixes from standard region codes
codes <- as.double(sapply(codes, gsub, pattern = "[^0-9.-]", replacement = ""))
codes
na.omit(codes)
x <- "21"
suppressWarnings(as.double(as.vector(x)) %in% codes)
x <- c(21, 15)
suppressWarnings(as.double(as.vector(x)) %in% codes)
as.double(as.vector(x)) %in% codes
load_all()
is_region_code_without_prefix(1:50)
x <- 1:50
as.double(as.vector(x)) %in% codes
document()
library(devtools)
load_all()
check_region_names("Kajaani")
check_region_names("Kajaanit")
is.true(check_region_names("Kajaanit"))
check_region_names("Kajaanit") == TRUE
check_region_names("Kajaani") == TRUE
offline <- TRUE
regions <- c("kunta", "seutukunta", "maakunta", "suuralue", "ely")
regionkey <- get_regionkey(offline = offline)
regionkey <- purrr::map(regions, ~tidyr::unite(regionkey, !!.x, paste(.x, c("name", "code"), sep = "_"))) %>%
purrr::flatten() %>%
as.data.frame() %>%
dplyr::select(regions)
regions <- c("kunta", "seutukunta", "maakunta", "ely")
regionkey <- get_regionkey(offline = offline)
regionkey <- purrr::map(regions, ~tidyr::unite(regionkey, !!.x, paste(.x, c("name", "code"), sep = "_"))) %>%
purrr::flatten() %>%
as.data.frame() %>%
dplyr::select(regions)
regions <- c("kunta", "seutukunta", "maakunta")
regionkey <- get_regionkey(offline = offline)
regionkey <- purrr::map(regions, ~tidyr::unite(regionkey, !!.x, paste(.x, c("name", "code"), sep = "_"))) %>%
purrr::flatten() %>%
as.data.frame() %>%
dplyr::select(regions)
head(regionkey)
data <- get_regionkey("kunta") %>%
dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
load_all()
check_region_var_name_code_correspondence(data$kunta_name, data$kunta_code)
load_all()
check_region_var_name_code_correspondence(data$kunta_name, data$kunta_code)
data$kunta_name
codes_to_names(data$kunta_code)
x < data$kunta_name
x <- data$kunta_name
y <- codes_to_names(data$kunta_name)
y <- codes_to_names(data$kunta_code)
head(y)
head(x)
identical(x, y)
tail(x, y)
identical(levels(x), levels(y))
identical(as.character(x), as.character(y))
load_all()
head(data)
check_region_var_name_code_correspondence(data$seutukunta_name, data$seutukunta_code)
detect_region_var(data)
warnings()
detect_region_var(data[1:100,])
detect_region_var(rbind(data[1:100,], data.frame(list(letters)))
)
df <- data[1:100,]
tail(df)
df[101,] <- letters[1:6]
df[101,] <- c(letters[1:6],0.23423)
tail(df)
df[is.na(df)] <- "x"
df
df[is.na(df)] <- "x"
df <- mutate_if(is.factor, as.character)
df <- mutate_if(df, is.factor, as.character)
tail(df)
df[is.na(df)] <- "x"
tail(df)
detect_region_var(df)
data <- df
region_name_var <- purrr::map_lgl(names(data), function(x) {all(is_region_name(x = data[[x]], year = year, offline = offline,
allow_nonstandard_names = TRUE))})
year <- NULL
offline = TRUE
region_name_var <- purrr::map_lgl(names(data), function(x) {all(is_region_name(x = data[[x]], year = year, offline = offline,
allow_nonstandard_names = TRUE))})
region_name_var
is_region_name("x")
is_region_name("x", allow_nonstandard_names = TRUE)
region_code_var <- purrr::map_lgl(names(data), function(x) {all(is_region_code(data[[x]], year = year, offline = offline))})
region_code_var
x <- df[,1]
tail(x)
all(is_region_name(x))
all(is_region_name(tail(x,1)))
x <- c("Pyhtää", "x")
is_region_name(x)
region_level = NULL
year = NULL
offline = TRUE
allow_nonstandard_names = FALSE
case_sensitive = TRUE
lang = "fi"
if(lang != "fi") {
offline <- FALSE
message("Overriding default option for offline when language other than Finnish required.")
}
# Get all standard region names
suppressMessages(
names <- get_regionclassification(region_level, year = year, lang = lang,
offline = offline, only_names = TRUE)
)
# Potentially add nonstandard region names
if(allow_nonstandard_names) {
nonstandard_names <-
dplyr::filter(statficlassifications::region_name_to_code_key,
grepl(paste(name_to_prefix(region_level), collapse = "|"), alue_code))
names <- c(names, nonstandard_names$alue_name)
}
case_sensitive
x %in% names
ifelse(case_sensitive,
x %in% names,
tolower(x) %in% tolower(names))
load_all()
load_all()
is_region_name(x)
load_all()
is_region_name(x)
tail(df)
detect_region_var(df)
is_region_name("sg34g324")
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "n9s2l2"))), 2)
})
is_region_code(c("KU005", "n9s2l2"))
x <- c("KU005", "n9s2l2")
is_region_code(x)
region_level = NULL
year = NULL
offline = TRUE
# Get all standard region codes
suppressMessages(
codes <- get_regionclassification(region_level, year = year, offline = offline, only_codes = TRUE)
)
# Test if x is in the codes and return
as.vector(x) %in% codes
x
# Test if x is in the codes and return
as.double(as.vector(x)) %in% codes
as.double(as.vector(x))
x[1] <- "005"
as.double(as.vector(x))
# Test if x is in the codes and return
suppressWarnings(as.double(as.vector(x)) %in% codes)
x
# Remove prefixes from standard region codes and remove NAs
codes <- na.omit(as.double(sapply(codes, gsub, pattern = "[^0-9.-]", replacement = "")))
# Test if x is in the codes and return
suppressWarnings(as.double(as.vector(x)) %in% codes)
load_all()
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "n9s2l2"))), 2)
})
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "n9s2l2"))), 2)
expect_equal(legnth(is_region_name(c("Kajaani", "Volantis"))),2)
})
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "n9s2l2"))), 2)
expect_equal(length(is_region_name(c("Kajaani", "Volantis"))),2)
})
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "R2D2"))), 2)
expect_equal(length(is_region_name(c("Kajaani", "Coruscant"))),2)
})
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(is.logical(is_region_code(c("KU005", "R2D2"))), c(TRUE, TRUE))
expect_equal(is.logical(is_region_name(c("Kajaani", "Coruscant"))), c(TRUE, TRUE))
})
is.logical(is_region_code(c("KU005", "R2D2")))
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "R2D2"))), 2)
expect_equal(length(is_region_name(c("Kajaani", "Coruscant"))), 2)
expect_equal(is.logical(is_region_code(c("KU005", "R2D2"))), TRUE)
expect_equal(is.logical(is_region_name(c("Kajaani", "Coruscant"))), TRUE)
})
df <- get_regionclassification("kunta", year = 2010)
detect_region_year(df$kunta_name, region_level = "kunta")
df <- get_regionclassification("kunta", year = 2018)
detect_region_year(df$kunta_name, region_level = "kunta")
check()
test()
library(devtools)
load_all()
v <- c("SSS", "KU103", "KU061","SK213", "MK04", "nav9w4t")
codes_to_names(v)
test_that("codes_to_names gives NA for unrecognized code", {
expect_equal(codes_to_names("R2D2"), NA)
})
codes_to_names("R2D2")
is_region_code("R2D2")
set_region_codes("R2D2")
args(codes_to_names)
load_all()
test_that("codes_to_names gives NA for unrecognized code", {
expect_equal(codes_to_names("R2D2", set_region_codes = FALSE), NA)
})
expect_equal(codes_to_names("R2D2", set_region_codes = FALSE), as.character(NA))
test_that("codes_to_names gives NA for unrecognized code", {
expect_equal(codes_to_names("R2D2", set_region_codes = FALSE), as.character(NA))
})
test_that("function for testing regional classifications produce logical vectors",{
expect_equal(length(is_region_code(c("KU005", "R2D2"))), 2)
expect_equal(length(is_region_name(c("Kajaani", "Coruscant"))), 2)
expect_equal(is.logical(is_region_code(c("KU005", "R2D2"))), TRUE)
expect_equal(is.logical(is_region_name(c("Kajaani", "Coruscant"))), TRUE)
})
load_all()
test_that("codes_to_names gives NA for unrecognized code", {
expect_equal(codes_to_names("R2D2", set_region_codes = FALSE), as.character(NA))
})
names_to_codes("weogwegw")
load_all()
names_to_codes("weogwegw")
test_that("names_to_codes gives NA for unrecognized name", {
expect_equal(codes_to_names("Coruscant", set_region_codes = FALSE), as.character(NA))
})
test_that("names_to_codes gives NA for unrecognized name", {
expect_equal(names_to_codes("Coruscant", set_region_codes = FALSE), as.character(NA))
})
test_that("names_to_codes gives NA for unrecognized name", {
expect_equal(names_to_codes("Coruscant"), as.character(NA))
})
set_region_codes("3weyg34g")
