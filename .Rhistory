unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!suppress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
print(prefix)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications(data, supress_ok_message = FALSE)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[status]), .call = FALSE)
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
head(data)
data[1,2] <- "KU021"
head(data)
check_region_classifications(data, supress_ok_message = FALSE)
data <- get_regionkey() %>% select(kunta_name, kunta_code) %>% mutate(values = rnorm(310))
head(data)
data <- mutate(across(is.factor), as.character)
data <- data %>% mutate(across(is.factor), as.character)
data <- data %>% mutate_at(is.factor, as.character)
data <- mutate(data, alue_name <- as.character(alue_name))
head(data)
data <- rename(data, alue_name = kunta_name, alue_code = kunta_code)
data <- mutate(data, alue_name <- as.character(alue_name))
glimpse(data)
data <- get_regionkey() %>% select(kunta_name, kunta_code) %>% mutate(values = rnorm(310))
data <- rename(data, alue_name = kunta_name, alue_code = kunta_code)
data <- mutate(data, alue_name = as.character(alue_name))
head(data)
data <- mutate(data, alue_code = as.character(alue_code))
head(data)
data[1,2] <- "KU021"
head(data)
check_region_classifications(data)
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
status
prefix_to_name
prefix_to_name[names(status)][!status]
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[names(status)][!status]), .call = FALSE)
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s)", prefix_to_name[names(status)][!status]))
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
check_region_classifications <- function(data, supress_ok_message = TRUE) {
code_prefixes <- unique(sapply(data$alue_code, gsub, pattern = "[^a-zA-Z]", replacement = ""))
code_prefixes <- code_prefixes[!code_prefixes == "SSS"] # remove later
prefix_to_name = c("SSS" = "koko maa", "KU" = "kunta", "SK" = "seutukunta", "MK" = "maakunta", "ELY" = "ely", "SA" = "suuralue")
status <- logical(length(code_prefixes))
names(status) <- code_prefixes
for(prefix in code_prefixes) {
classification_in_key <- statficlassifications::get_regionkey() %>%
dplyr::select(paste(prefix_to_name[prefix], c("code", "name"), sep = "_")) %>%
tidyr::unite(alue, everything(), sep = "_")
classification_in_data <- dplyr::filter(data, grepl(prefix, alue_code)) %>% select(contains("alue_")) %>%
unite(alue, alue_code, alue_name, sep = "_") %>%
distinct()
status[prefix] <- all(classification_in_data$alue %in% classification_in_key$alue)
}
if(!any(status)) {
warning(paste0("Problem with the classification, names or codes of region(s) ",
paste0(prefix_to_name[names(status)][!status], collapse = ", ")))
} else if(!supress_ok_message) {
message("Classification ok!")
}
}
check_region_classifications(data)
library(devtools)
load_all()
search_keys("manner")
library(tidyverse)
search_keys("manner")
library(devtools)
load_all()
## Get and save regionkey for offline use and faster functions.
regionkey <- get_regionkey(offline = FALSE)
usethis::use_data(regionkey, overwrite = TRUE, internal = TRUE)
library(dplyr)
## Get and save regionkey for offline use and faster functions.
regionkey <- get_regionkey(offline = FALSE)
usethis::use_data(regionkey, overwrite = TRUE, internal = TRUE)
document()
rm(list = ls())
load_all()
document8)
document()
load_all()
library(devtools)
load_all()
regionkey <- get_regionkey(offline = TRUE)
library(dplyr)
regionkey <- get_regionkey(offline = TRUE)
readRDS("R/sysdata.rda") -> key
load("C:/Users/juhoa/git_clones/statficlassifications/R/sysdata.rda")
load("R/sysdata.rda")
load_all()
rm(list = ls())
load_all()
regionkey <- get_regionkey(offline = TRUE)
library(devtools)
load_all()
regionkey
load("R/sysdata.rda")
## Get and save regionkey for offline use and faster functions.
regionkey <- get_regionkey(offline = FALSE)
usethis::use_data(regionkey, overwrite = TRUE)
library(dplyr)
## Get and save regionkey for offline use and faster functions.
regionkey <- get_regionkey(offline = FALSE)
usethis::use_data(regionkey, overwrite = TRUE)
document()
rm(list = ls())
document()
load_all()
regionkey
load_all()
key <- regionkey(offline = TRUE)
key <- get_regionkey(offline = TRUE)
statficlassifications::regionkey
statficlassifications::get_regionkey(offline = TRUE)
library(dplyr)
statficlassifications::get_regionkey(offline = TRUE)
load("C:/Users/juhoa/git_clones/statficlassifications/data/regionkey.rda")
data(regionkey())
data(regionkey
)
libary(devtoos)
library(devtools)
document()
url <-  "https://www.stat.fi/static/media/uploads/meta/luokitukset/lakkautetut_kunnat_aakkosjarj20_taul6.xlsx"
tmp = tempfile(fileext = ".xlsx")
download.file(url = url, destfile = tmp, mode="wb")
df <- read_excel(tmp)
df <- df[-(1:8),]
df <- dplyr::select(df, 1,4)
names(df) <- c("old", "current")
df$old <- paste0("KU", df$old)
df$current <- paste0("KU", df$current)
df2 <- get_regionkey(source = "kunta", targets = "kunta", year = get_latest_year(), offline = TRUE)
df2 <- mutate(df2, old = kunta_code, current = kunta_code)
df2 <- dplyr::select(df2, old, current)
old_current_mun_key <- rbind(df, df2)
usethis::use_data(old_current_mun_key, overwrite = TRUE)
libary(tidyverse)
library(tidyverse)
use_package(readxl)
use_package("readxl")
url <-  "https://www.stat.fi/static/media/uploads/meta/luokitukset/lakkautetut_kunnat_aakkosjarj20_taul6.xlsx"
tmp = tempfile(fileext = ".xlsx")
download.file(url = url, destfile = tmp, mode="wb")
df <- readxl::read_excel(tmp)
df <- df[-(1:8),]
df <- dplyr::select(df, 1,4)
names(df) <- c("old", "current")
df$old <- paste0("KU", df$old)
df$current <- paste0("KU", df$current)
df2 <- get_regionkey(source = "kunta", targets = "kunta", year = get_latest_year(), offline = TRUE)
df2 <- mutate(df2, old = kunta_code, current = kunta_code)
df2 <- dplyr::select(df2, old, current)
old_current_mun_key <- rbind(df, df2)
usethis::use_data(old_current_mun_key, overwrite = TRUE)
document()
url <-  "https://www.stat.fi/static/media/uploads/meta/luokitukset/lakkautetut_kunnat_aakkosjarj20_taul6.xlsx"
tmp = tempfile(fileext = ".xlsx")
download.file(url = url, destfile = tmp, mode="wb")
df <- readxl::read_excel(tmp)
df <- df[-(1:8),]
df <- dplyr::select(df, 1,4)
names(df) <- c("old", "current")
df$old <- paste0("KU", df$old)
df$current <- paste0("KU", df$current)
head(df)
rm(regionkey)
document()
# Haetaan tiedosto lakkautetut kunnat aakkosjarjestyksessa
url <-  "https://www.stat.fi/static/media/uploads/meta/luokitukset/lakkautetut_kunnat_aakkosjarj20_taul6.xlsx"
tmp = tempfile(fileext = ".xlsx")
download.file(url = url, destfile = tmp, mode="wb")
df <- readxl::read_excel(tmp)
df <- df[-(1:8),]
df <- dplyr::select(df, 1,4)
names(df) <- c("old", "current")
df$old <- paste0("KU", df$old)
df$current <- paste0("KU", df$current)
df2 <- get_regionkey(source = "kunta", targets = "kunta", year = get_latest_year(), offline = FALSE)
df2 <- mutate(df2, old = kunta_code, current = kunta_code)
df2 <- dplyr::select(df2, old, current)
old_current_mun_key <- rbind(df, df2)
usethis::use_data(old_current_mun_key, overwrite = TRUE)
document()
load_all()
v <- c("020" = "Akaa", "047" = "Enontekiö")
standardize_code_prefixes_vct(v)
v <- c("020" = "Akaa", "047" = "Enontekiö", "15" = "Pohjanmaa", "133" = "Keuruu")
standardize_code_prefixes_vct(v)
x <- v
<
x
# test which numbers in vector can be found among which codes and assign these numbers the
# correct prefix.
data(old_current_mun_key, package = "statficlassifications")
kunta_codes <- sapply(old_current_mun_key$old, gsub, pattern = "[^0-9.-]", replace = "")
# kunnat
if(!any(grepl("KU", names(x)))) {
x_names <- names(x)
x_names[x_names %in% kunta_codes] <- paste0("KU", x_names[x_names %in% kunta_codes])
names(x) <- x_names
}
x
# maakunnat
if(!any(grepl("MK", names(x)))) {
data(regionkey, package = "statficlassifications")
maakunta_codes <- sapply(regionkey$maakunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x_names <- names(x)
x_names[x_names %in% maakunta_codes] <- paste0("MK", x_names[x_names %in% maakunta_codes])
names(x) <- x_names
}
x
# seutukunnat
if(!any(grepl("SK", names(x)))) {
data(regionkey, package = "statficlassifications")
seutukunta_codes <- sapply(regionkey$seutukunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x_names <- names(x)
x_names[x_names %in% seutukunta_codes] <- paste0("MK", x_names[x_names %in% seutukunta_codes])
names(x) <- x_names
}
x
x <- v
# kunnat
if(!any(grepl("KU", names(x)))) {
x_names <- names(x)
x_names[x_names %in% kunta_codes] <- paste0("KU", x_names[x_names %in% kunta_codes])
names(x) <- x_names
}
# maakunnat
if(!any(grepl("MK", names(x)))) {
data(regionkey, package = "statficlassifications")
maakunta_codes <- sapply(regionkey$maakunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x_names <- names(x)
x_names[x_names %in% maakunta_codes] <- paste0("MK", x_names[x_names %in% maakunta_codes])
names(x) <- x_names
}
# seutukunnat
if(!any(grepl("SK", names(x)))) {
data(regionkey, package = "statficlassifications")
seutukunta_codes <- sapply(regionkey$seutukunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x_names <- names(x)
x_names[x_names %in% seutukunta_codes] <- paste0("SK", x_names[x_names %in% seutukunta_codes])
names(x) <- x_names
}
x
load_all()
rm(regionkey)
load_all()
v <- c("020" = "Akaa", "047" = "Enontekiö", "15" = "Pohjanmaa", "133" = "Keuruu")
standardize_code_prefixes_vct(v)
standardize_code_prefixes_vct2 <- function(x) {
# test which numbers in vector can be found among which codes and assign these numbers the
# correct prefix.
data(old_current_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
# kunnat
if(!any(grepl("KU", x))) {
kunta_codes <- sapply(old_current_mun_key$old, gsub, pattern = "[^0-9.-]", replace = "")
x[x %in% kunta_codes] <- paste0("KU", x[x %in% kunta_codes])
}
# maakunnat
if(!any(grepl("MK", x))) {
maakunta_codes <- sapply(regionkey$maakunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x[x %in% maakunta_codes] <- paste0("MK", x[x %in% maakunta_codes])
}
# seutukunnat
if(!any(grepl("SK", names(x)))) {
seutukunta_codes <- sapply(regionkey$seutukunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x[x %in% seutukunta_codes] <- paste0("SK", x[x %in% seutukunta_codes])
}
if(any(grepl("000", names(x)))) {
x_names[x_names %in% c("000")] <- "SSS"
names(x) <- x_names
x["SSS"] <- "KOKO MAA"
}
x
}
standardize_code_prefixes_vct2(names(v))
names(v)
#' @return
#' @export
#'
#' @examples
#'
#'   v <- c("020" = "Akaa", "047" = "Enontekiö", "15" = "Pohjanmaa", "133" = "Keuruu")
#'   standardize_code_prefixes_vct(names(v))
#'   v <- c("020" = "Akaa", "047" = "Enontekiö", "MK15" = "Pohjanmaa", "SK133" = "Keuruu")
#'   standardize_code_prefixes_vct(names(v))
#'
standardize_code_prefixes_vct <- function(x) {
# test which numbers in vector can be found among which codes and assign these numbers the
# correct prefix.
data(old_current_mun_key, package = "statficlassifications")
data(regionkey, package = "statficlassifications")
# kunnat
if(!any(grepl("KU", x))) {
kunta_codes <- sapply(old_current_mun_key$old, gsub, pattern = "[^0-9.-]", replace = "")
x[x %in% kunta_codes] <- paste0("KU", x[x %in% kunta_codes])
}
# maakunnat
if(!any(grepl("MK", x))) {
maakunta_codes <- sapply(regionkey$maakunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x[x %in% maakunta_codes] <- paste0("MK", x[x %in% maakunta_codes])
}
# seutukunnat
if(!any(grepl("SK", names(x)))) {
seutukunta_codes <- sapply(regionkey$seutukunta_code, gsub, pattern = "[^0-9.-]", replace = "")
x[x %in% seutukunta_codes] <- paste0("SK", x[x %in% seutukunta_codes])
}
if(any(grepl("000", x))) {
x[x%in% c("000")] <- "SSS"
x["SSS"] <- "KOKO MAA"
}
x
}
v <- c("020" = "Akaa", "047" = "Enontekiö", "MK15" = "Pohjanmaa", "SK133" = "Keuruu")
standardize_code_prefixes_vct(names(v))
head(old_current_mun_key)
#' @param x
#'
#' @return
#' @export
#'
#' @examples
#'
#'   v <- c("KU001", "KU609", "KU003", "KU3010")
#'   join_abolished_municipalities
#'
join_abolished_municipalities <- function(x) {
data(old_current_mun_key, package = "statficlassifications")
kunta_codes <- old_current_mun_key$old
# kunnat
kunta_names <- x[x %in% kunta_codes]
new_kunta <- dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")$current
x[x %in% kunta_codes] <- new_kunta
x
# possibly add names newly according to new codes.
}
v <- c("KU001", "KU609", "KU003", "KU3010")
join_abolished_municipalities
join_abolished_municipalities(v)
x <- v
data(old_current_mun_key, package = "statficlassifications")
kunta_codes <- old_current_mun_key$old
kunta_codes
# kunnat
kunta_names <- x[x %in% kunta_codes]
kunta_names
new_kunta <- dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")$current
new_kunta
data.frame(old = kunta_names)
dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")
new_kunta <- dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")$current
new_kunta
v <- c("KU414", "KU609", "KU429", "KU273")
x <- v
# kunnat
kunta_names <- x[x %in% kunta_codes]
new_kunta <- dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")$current
new_kunta
x[x %in% kunta_codes] <- new_kunta
#' @param x
#'
#' @return
#' @export
#'
#' @examples
#'
#'   v <- c("KU414", "KU609", "KU429", "KU273")
#'   join_abolished_municipalities(v)
#'
join_abolished_municipalities <- function(x) {
data(old_current_mun_key, package = "statficlassifications")
kunta_codes <- old_current_mun_key$old
# kunnat
kunta_names <- x[x %in% kunta_codes]
new_kunta <- dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")$current
if(lenght(new_kunta) > length(x)) {stop("Let Juho know about this error")}
x[x %in% kunta_codes] <- new_kunta
x
# possibly add names newly according to new codes.
}
v <- c("KU414", "KU609", "KU429", "KU273")
join_abolished_municipalities(v)
#' @param x
#'
#' @return
#' @export
#'
#' @examples
#'
#'   v <- c("KU414", "KU609", "KU429", "KU273")
#'   join_abolished_municipalities(v)
#'
join_abolished_municipalities <- function(x) {
data(old_current_mun_key, package = "statficlassifications")
kunta_codes <- old_current_mun_key$old
# kunnat
kunta_names <- x[x %in% kunta_codes]
new_kunta <- dplyr::left_join(data.frame(old = kunta_names), old_current_mun_key, by = "old")$current
if(length(new_kunta) > length(x)) {stop("Let Juho know about this error")}
x[x %in% kunta_codes] <- new_kunta
x
# possibly add names newly according to new codes.
}
v <- c("KU414", "KU609", "KU429", "KU273")
join_abolished_municipalities(v)
document()
rm(list = ls())
document()
install()
