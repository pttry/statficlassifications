region <- "kunta"
year = 2015
localId <- grep(region,
search_classifications("kunta", as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
localId
key_temp <- get_classification(localId, print_series_name = FALSE)
head(key_temp)=
head(key_temp)
name_to_prefix("kunta")
key_temp$code <- paste0(name_to_prefix(region), key$code)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
head(key_temp)
key <- data.frame()
key <- rbind(key, key_temp)
region <- "seutukunta"
localId <- grep(region,
search_classifications("kunta", as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
year
localId <- grep(region,
search_classifications(region, as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
localId
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
head(key_temp)
c(paste0(regions, "_code"), paste0(regions, "_name"))
regions
regions <- "seutukunta"
c(paste0(regions, "_code"), paste0(regions, "_name"))
load_all()
get_region_code_name_key("kunta") %>% head()
load_all()
get_region_code_name_key("kunta") %>% head()
get_region_code_name_key("seutukunta") %>% head()
get_region_code_name_key("seutukunta", "maakunta") %>% head()
get_region_code_name_key("seutukunta", "maakunta") %>% tail())
get_region_code_name_key("seutukunta", "maakunta") %>% tail()
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
get_region_code_name_key(regions) -> key
head(key)
tail(key)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2007:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
year
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
yaer
year
key_temp <- get_region_code_name_key(regions, year = year)
search_classifications(regions, year = 2008)
load_all()
get_region_code_name_key("ely", year = 2008)
load_all()
get_region_code_name_key("ely", year = 2008)
get_region_code_name_key("ely", year = 2008)
get_region_code_name_key("ely", "seutukunta", year = 2008)
get_region_code_name_key("ely", "seutukunta", year = 2008) %>% key
get_region_code_name_key("ely", "seutukunta", year = 2008) -> key
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
year
region
search_classifications("seutukunta", year = 2010)
get_region_code_name_key("seutukunta", year = 2010)
regions <- "seutukunta"
year = 2010
region <- regions
localId <- grep(region,
search_classifications(region, as_localId = TRUE),
value = TRUE) %>%
grep(pattern = year, value = TRUE)
localId
localId <- "ely_1_20080101"
key_temp <- get_classification(localId, print_series_name = FALSE)
head(key_temp)
load_all()
get_region_code_name_key("kunta", year = 2010)
get_region_code_name_key("seutukunta", year = 2010) -> keky
head(keky)
get_region_code_name_key("seutukunta", "maakunta", year = 2010) -> keky
tail(keky)
head(keky)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
year
region
year <- 2008
key_temp <- get_region_code_name_key(regions, year = year)
get_region_code_name_key(regions, year = year)
key <- data.frame()
for(region in regions) {
# localId <- grep(region,
#                 search_classifications(region, as_localId = TRUE),
#                 value = TRUE) %>%
#            grep(pattern = year, value = TRUE)
# if(length(localId) == 0) {
#   message(paste0("No region name-code key found for ", region, " for year ", year))
#   next
#  }
localId <- paste0(region, "_1_", year, "0101")
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
key <- rbind(key, key_temp)
}
region
key_temp <- get_classification(localId, print_series_name = FALSE)
key_temp$code <- paste0(name_to_prefix(region), key_temp$code)
key_temp
load_all()
key_temp <- get_region_code_name_key(regions, year = year)
head(key_temp)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
head(key)
dim(key)
key <- key[!duplicated, ]
key <- key[!duplicated(key), ]
dim(key)
View(key)
key <- rbind(data.frame(alue_code = "SSS", alue_name = "KOKO MAA"), key)
head(key)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(data.frame(key, alue_code = "SSS", alue_name = "KOKO MAA"))
head(key)
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
head(key)
tail(key)
rownames(key) <- NULL
tail(key)
key %>% filter(grepl("Ahven", alue_name))
# Prepare and save general code-name key
# For municipalities, the key also has their codes without prefixes?
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, aluename != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
# Prepare and save general code-name key
# For municipalities, the key also has their codes without prefixes?
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
load_all()
get_region_code_name_key("seutukunta")
get_region_code_name_key("seutukunta", as_named_vector = TRUE)
get_region_code_name_key("seutukunta", "maakunta")
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names(v)
v <- c("SSS", "KU103", "KU061","SK213", "MK04", "nav9w4t")
codes_to_names(v)
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names(f)
grepl("^d+$", "KU213")
grepl("^d+$", "213")
grepl("^\d+$", "213")
grepl("^\\d+$", "213")
grepl("^\\d+$", "SK213")
v
x <- v
grepl("^\\d+$", x)
any(!grepl("^\\d+$", x))
any(grepl("^\\d+$", x)
)
"It appears you are trying to map codes without prefixes to regions. \\n
In this case, same codes may map to multiple regions so there is a risk \\n
errors in mapping. I will start by first trying to fit kunnat to \\n'
to your codes and then seutukunnat, then maakunnat then suuralueet and \\n
then ely-alueet."
"It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \\n
errors in mapping. I will start by first trying to fit kunnat to \\n'
to your codes and then seutukunnat, then maakunnat then suuralueet and \\n
then ely-alueet."
"It appears you are trying to map codes without prefixes to regions.
In this case, same codes may map to multiple regions so there is a risk
errors in mapping. I will start by first trying to fit kunnat to
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet."
cat("It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \n
errors in mapping. I will start by first trying to fit kunnat to \n
to your codes and then seutukunnat, then maakunnat then suuralueet and \n
then ely-alueet.")
cat("It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \n
errors in mapping. I will start by first trying to fit kunnat to \n
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet.")
cat("It appears you are trying to map codes without prefixes to regions.
In this case, same codes may map to multiple regions so there is a risk
errors in mapping. I will start by first trying to fit kunnat to
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet.")
prefix_name_key$prefix[-1:2]
prefix_name_key$prefix[-(1:2)]
prefix_name_key$prefix
prefix_name_key$prefix[prefix_name_key$prefix != "SSS"]
# Create the prefix name correspondence used by the package
key <- c("SSS" = "KOKO MAA",
"KU" = "kunta",
"SK" = "seutukunta",
"MK" = "maakunta",
"SA" = "suuralue",
"ELY" = "ely")
prefix_name_key<- data.frame(prefix = names(key), name = key)
rownames(prefix_name_key) <- NULL
usethis::use_data(prefix_name_key, overwrite = TRUE, internal = TRUE)
load_all()
prefix_name_key$prefix
v
v <- c("KU103", "061")
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x <- v
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x
names(x) <- x_names
statficlassifications::region_code_name_key
load_all()
rm(list = ls())
load_all()
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x <- c("KU103", "061")
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x
output <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x[is.na(output)]
x
is.na(output)
output
prefix <- "KU"
key <- statficlassifications:region_code_name_key
key <- statficlassifications::region_code_name_key
key <- dplyr::filter(key, grepl(prefix, key$alue_code))
key$alue_code <- unlist(sapply(str_extract, key$alue_code, pattern = prefix))
key$alue_code <- unlist(sapply(key$alue_code, str_extract, pattern = prefix))
head(key)
key <- statficlassifications::region_code_name_key
key <- dplyr::filter(key, grepl(prefix, key$alue_code))
key$alue_code <- unlist(sapply(key$alue_code, str_remove, pattern = prefix)
)
head(key)
devtools::install()
load("C:/Users/juhoa/git_clones/statficlassifications/data/region_code_name_key.rda")
region_code_name_key
head(region_code_name_key)
duplicated(region_code_name_key$alue_code)
tail(region_code_name_key)
View(region_code_name_key)
filter(region_code_name_key, alue_code == "SA4")
dplyr::filter(region_code_name_key, alue_code == "SA4")
region_code_name_key[duplicated(region_code_name_key$alue_code),]
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- key[!duplicated(region_code_name_key$alue_code),]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
devtools::load_all()
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- key[!duplicated(region_code_name_key$alue_code),]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
key[!duplicated(region_code_name_key$alue_code),]
key[duplicated(region_code_name_key$alue_code),]
region_code_name_key[duplicated(region_code_name_key$alue_code),]
# Prepare and save general code-name key
# The idea is to go through all region classifications determined below for all years and look
# for all possible regions. In this way the the key will have all regions that have existed
# in year 2008 and after.
# For municipalities, the key also has their codes without prefixes?
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2020:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
#key <- key[!duplicated(region_code_name_key$alue_code),]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
install()
devtools::install()
load_all()
devtools::load_all()
v <- c(5,20,111)
set_region_codes(v)
x <- 5
paste0("000", as.character(x))
stringr::str_sub(paste0("000", as.character(x)), -3,-1)
numeric_to_character <- function(x, char_length) {
stringr::str_sub(paste0("000", as.character(x)), -char_length,-1)
}
numeric_to_character(x)
numeric_to_character(x, char_length = 3)
numeric_to_character(x, char_length = 2)
numeric_to_character(x, char_length = 1)
numeric_to_character("005")
numeric_to_character("005", 3)
numeric_to_character("005", 2)
v <- c(4,5)
numeric_to_character(v)
numeric_to_character(v, char_length = 3)
numeric_code_to_character <- function(x, region_level_prefix) {
if(region_level_prefix %in% c("KU", "SK")) {
char_length <- 3
} else {
char_length <- 2
}
stringr::str_sub(paste0("000", as.character(x)), -char_length,-1)
}
load_all()
library(devtools)
load_all()
rm(list = ls())
load_all()
v <- c(5,20,111)
numeric_code_to_character(v)
numeric_code_to_character(v, "KU")
set_region_codes(v)
load_all()
set_region_codes(v)
load_all()
set_region_codes(v)
x <- v
x
if(any(x %in% codes$SK[codes$SK %in% codes$KU]))  {
warning(paste("Code(s)", paste(x[x %in% codes$SK[codes$SK %in% codes$KU]], collapse = ", "),
"could have been interpreted as seutukunta code(s), but have been interpreted as municipality code(s)."))
}
abolished_mun_key <- statficlassifications::abolished_mun_key
regionkey <- statficlassifications::regionkey
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(any(x %in% codes$SK[codes$SK %in% codes$KU]))  {
warning(paste("Code(s)", paste(x[x %in% codes$SK[codes$SK %in% codes$KU]], collapse = ", "),
"could have been interpreted as seutukunta code(s), but have been interpreted as municipality code(s)."))
}
if(!all(x %in% unlist(codes))) {
warning(paste("Code(s)",
paste(x[!(x %in% unlist(codes))], collapse = ", "),
"not recognized as region codes. They have been left as they were."))
}
prefix <- "KU"
x <- numeric_code_to_character(x, region_level_prefix = prefix)
x
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
x
prefix <- "MK"
x <- numeric_code_to_character(x, region_level_prefix = prefix)
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
x
set_region_codes(v)
prefix <- "MK"
x[(x %in% codes[[prefix]])
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)]
x[x %in% codes[[prefix]]]
prefix <- "KU"
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)]
x
x <- v
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)]
load_all()
load_all()
v
set_region_codes(v)
set_region_codes(v, regon_level = "KU")
set_region_codes(v, region_level = "KU")
load_all()
set_region_codes(v, region_level = "KU")
set_region_codes(v, region_level = "SK")
set_region_codes(v, region_level = "MK")
load_all()
set_region_codes(v, region_level = "KU")
set_region_codes(v, region_level = "MK")
set_region_codes(v, region_level = "SK")
set_region_codes(c(1,2,3,4))
set_region_codes(c(1,2,3,4), "KU")
v <- as.factor(1:4)
v
set_region_codes(v)
is.numeric(v)
load_all()
set_region_codes(v)
set_region_codes(v, region_level = "KU")
v <- ("005", "SK112")
v <- c("005", "SK112")
set_region_codes(v)
v
v <- c(5,20,111)
codes_to_names(v)
load_all()
codes_to_names(v)
codes_to_names(v)
load_all()
codes_to_names(v)
