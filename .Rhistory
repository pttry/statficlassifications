data[1:3,]
data
data <- data[1:3m]
data <- data[1:3,]
data
data <- data.frame(data)
data
data %>% add_regions("maakunta")
data %>% add_region("maakunta")
document()
document()
check()
install()
library(devtools)
document()
install()
keys <- c("C", "C#", "D", "Eb", "E", "F", "F#", "G", "G#", "A", "A#", "H")
for(i in 1:100) {
print(sample(keys, 1));Sys.sleep(10);
}
print(sample(keys, 1));Sys.sleep(20);
for(i in 1:100) {
print(sample(keys, 1));Sys.sleep(20);
}
alarm()
alarm()
install.packages("beebr")
library(beebr)
library(beepr)
beep <- function(n = 3){
for(i in seq(n)){
system("rundll32 user32.dll,MessageBeep -1")
Sys.sleep(.5)
}
}
beep()
system("rundll32 user32.dll,MessageBeep -1")
system2(command = "PowerShell",
args = c("-Command",
"\"Add-Type -AssemblyName System.Speech;",
"$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;",
paste0("$speak.Speak('", print(sample(keys, 1)), "');\"")
))
for(i in 1:100) {
system2(command = "PowerShell",
args = c("-Command",
"\"Add-Type -AssemblyName System.Speech;",
"$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;",
paste0("$speak.Speak('", print(sample(keys, 1)), "');\"")
))
Sys.sleep(20);
}
keys <- c("C", "C sharp", "D", "E flat", "E", "F", "F sharp", "G", "G sharp", "A", "A sharp", "H")
for(i in 1:100) {
system2(command = "PowerShell",
args = c("-Command",
"\"Add-Type -AssemblyName System.Speech;",
"$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;",
paste0("$speak.Speak('", print(sample(keys, 1)), "');\"")
))
Sys.sleep(20);
}
keys <- c("C", "C sharp", "D flat", "D", "D sharp", "E flat",
"E", "F", "F sharp", "G flat", "G", "G sharp", "A flat", "A", "A sharp", "B", "B flat")
for(i in 1:100) {
system2(command = "PowerShell",
args = c("-Command",
"\"Add-Type -AssemblyName System.Speech;",
"$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;",
paste0("$speak.Speak('", print(sample(keys, 1)), "');\"")
))
Sys.sleep(20);
}
win.print()
for(i in 1:100) {
system2(command = "PowerShell",
args = c("-Command",
"\"Add-Type -AssemblyName System.Speech;",
"$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;",
paste0("$speak.Speak('", print(sample(keys, 1)), "');\"")
))
Sys.sleep(sample(10:40, 1));
}
for(i in 1:100) {
system2(command = "PowerShell",
args = c("-Command",
"\"Add-Type -AssemblyName System.Speech;",
"$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer;",
paste0("$speak.Speak('", print(sample(keys, 1)), "');\"")
))
Sys.sleep(sample(10:40, 1));
}
library(statficlassifications)
key <- get_regionkey("maakunta")
key
key <- get_regionkey(from = "kunta", "maakunta")
key
library(devtools)
load_all()
localId <- "kunta_1_20200101%23seutukunta_1_20200101"
get_key(localId)
key <- get_key(localId)
key <- suppressMessages(get_key(localId))
library(devtools)
check()
document()
load_all()
get_regionkey()
get_regionkey("kunta", "seutukunta", only_codes = TRUE)
get_regionclassification("seutukunta")
get_regionclassification("seutukunta", as_named_vector = TRUE)
get_regionclassification("seutukunta", "maakunta")
check()
library(devtools)
args(httr::GET)
load_all()
localId <- "kunta_1_20200101%23seutukunta_1_20200101"
access_API(localId, content = "data")
df <- access_API(localId, content = "data")
localIds <- c("kunta_1_20200101%23maakunta_1_20200101")
df <- access_API(localIds, content = "data")
head(df)
localIds <- c("kunta_1_20200101%23seutukunta_1_20200101", "kunta_1_20200101%23maakunta_1_20200101")
df <- access_API(localIds, content = "data")
load_all()
df <- access_API(localIds, content = "data")
args(httr::content)
load_all()
df <- access_API(localIds, content = "data")
load_all()
df <- access_API(localIds, content = "data")
load_all()
df <- access_API(localIds, content = "data")
df
str(df)
length(df)
args(str)
str(df, max.level = 1)
df1 <- df[1]
df1
head(df1)
df2 <- lapply(df, as.data.frame())
df2 <- lapply(df, as.data.frame
)
identical(df, df2)
localId <- "kunta_1_20200101%23seutukunta_1_20200101"
df <- access_API(localId, content = "data")
head(df)
localId <- "kunta_1_20200101%23seutukunta_1_20200101"
get_key(localId)
get_regionkey(from = "kunta", "suuralue")
get_regionkey(from = "kunta", "suuralue", offline = FALSE)
names(statficlassifications::regionkey)
grepl("suuralue", names(statficlassifications::regionkey))
grepl("seutukunta", names(statficlassifications::regionkey))
grepl("suuralue", names(statficlassifications::regionkey)) %>% all()
grepl("suuralue", names(statficlassifications::regionkey)) %>% !all()
!all(grepl("suuralue", names(statficlassifications::regionkey)) )
grepl(c("kunta", "suuralue", names(statficlassifications::regionkey))
)
grepl(c("kunta", "suuralue"), names(statficlassifications::regionkey))
targets <- c("kunta", "seutukunta")
!all(grepl(c("kunta", "suuralue"), names(statficlassifications::regionkey)) )
sapply(c("kunta", "suuralue"), function(x) {!all(grepl(pattern = x, names(statficlassifications::regionkey))} )
sapply(c("kunta", "suuralue"), function(x) {!all(grepl(pattern = x, names(statficlassifications::regionkey))) })
!all(sapply(c("kunta", "suuralue"), function(x) {!all(grepl(pattern = x, names(statficlassifications::regionkey)))}))
!all(sapply(c("kunta", "suuralue"), ~{!all(grepl(pattern = ., names(statficlassifications::regionkey)))}))
!all(sapply(c("kunta", "suuralue"), ~!all(grepl(pattern = ., names(statficlassifications::regionkey)))))
!all(sapply(c("kunta", "suuralue"), ~!all(grepl(pattern = x, names(statficlassifications::regionkey)))))
load_all()
get_regionkey(from = "kunta", "suuralue")
load_all()
get_regionkey(from = "kunta", "suuralue")
targets <- suuralue
targets <- "suuralue"
!all(sapply(targets, function(x) {!all(grepl(pattern = x, names(statficlassifications::regionkey)))}))
sapply(targets, function(x) {!all(grepl(pattern = x, names(statficlassifications::regionkey)))})
load_all()
!all(sapply(targets, function(x) {all(grepl(pattern = x, names(statficlassifications::regionkey)))}))
load_all()
get_regionkey(from = "kunta", "suuralue")
!all(sapply(targets, ~ all(grepl(pattern = .x, names(statficlassifications::regionkey)))))
!all(sapply(targets, ~ all(grepl(pattern = .x, names(statficlassifications::regionkey)))))
key <- get_regionkey(from = "kunta", "seutukunta")
key <- get_regionkey(from = "kunta", "suuralue")
targets <- "seutukunta"
!all(sapply(targets, function(x) {all(grepl(pattern = x, names(statficlassifications::regionkey)))}))
sapply(targets, function(x) {all(grepl(pattern = x, names(statficlassifications::regionkey)))})
x <- "seutukunta"
grepl(pattern = x, names(statficlassifications::regionkey)
)
any(grepl(pattern = x, names(statficlassifications::regionkey)))
sapply(targets, function(x) {any(grepl(pattern = x, names(statficlassifications::regionkey)))})
targets <- c("seutukunta", "suuralue")
sapply(targets, function(x) {any(grepl(pattern = x, names(statficlassifications::regionkey)))})
load_all()
key <- get_regionkey(from = "kunta", "seutukunta")
key <- get_regionkey(from = "kunta", "suuralue")
library(devtools)
load_all()
key <- get_regionkey("kunta", "seutukunta")
head(key)
key <- get_regionkey("kunta")
head(key)
key <- get_regionkey("kunta", "maakunta")
head(key)
key <- get_regionkey("kunta", "maakunta", "suuralue")
head(key)
key <- get_regionkey("seutukunta", "maakunta")
head(key)
load_all()
key <- get_regionkey("kunta", "seutukunta")
head(key)
key <- get_regionkey("maakunta", "seutukunta")
head(key)
key <- get_regionkey("maakunta", "suuralue")
head(key)
key <- get_regionkey()
head(key)
load_all()
head(key)
key <- get_regionkey()
head(key)
get_regionkey("maakunta", "suuralue")
get_regionkey("seutukunta", "maakunta")
load_all()
get_regionkey("seutukunta", "maakunta") %>% head()
get_regionkey("seutukunta", "suuralue") %>% head()
load_all()
get_regionkey("seutukunta", "suuralue") %>% head()
get_regionkey("seutukunta", "maakunta") %>% head()
get_regionkey("seutukunta", "jokualue")
load_all()
get_regionkey("seutukunta", "jokualue")
load_all()
head(get_regionkey("maakunta", "suuralue"))
load_all()
head(get_regionkey("maakunta", "suuralue"))
load_all()
head(get_regionkey("maakunta", "suuralue"))
head(get_regionkey("maakunta", "seutukunta))
head(get_regionkey("maakunta", "seutukunta")
)
dplyr::distinct()
dplyr::distinct
region_code_prefixes
name_to_prefix(c("maakunta", "seutukunta"))
load_all()
head(get_regionkey("maakunta", "seutukunta")
)
name_to_prefix("kunta")
load_all()
head(get_regionkey("maakunta", "seutukunta"))
get_regionkey("maakunta", "suuralue", only_codes = TRUE)
search_keys()
key <- get_regionkey("kunta", "sairaanhoitop")
key <- get_regionkey("kunta", "maakunta")
head(key)
key <- get_regionkey("kunta", "suuralue")
key <- get_regionkey("kunta", "seutukunta")
head(key)
regions <- c("kunta", "maakunta")
regionkey <- statficlassifications::regionkey
head(regionkey)
regionkey <- dplyr::select(regionkey, contains(regions))
head(regionkey)
regions
load_all()
regions <- c("kunta", "maakunta")
key <- get_regionkey("kunta", "maakunta")
load_all()
key <- get_regionkey("kunta", "maakunta")
head(key)
key <- get_regionkey("kunta", "suuralue")
load_all()
key <- get_regionkey("kunta", "suuralue")
head(key)
key <- get_regionkey("kunta", "sairaanhoitop")
head(key)
search_keys()
key <- get_regionkey("kunta", "tyossakayntial")
head(key)
key <- get_regionkey("maakunta", "vaalipiiri")
head(key)
search_keys("maakunta", "vaalipiiri")
search_keys("vaalipiiri")
head(get_regionclassification("kunta"))
key <- get_regionkey("maakunta", "vaalipiiri", offline = FALSE)
head(key)
get_regionclassification("suuralue")
get_regionclassification("suuralue", year = 2010)
get_regionclassification("suuralue", year = 2010, offline = FALSE)
load_all()
get_regionclassification("suuralue", year = 2010, offline = FALSE)
key <- get_regionclassification()
head(key)
tail(key)
load_all()
key <- get_regionclassification()
head(key)
tail(key)
install()
get_regionkey("suuralue")
get_classification("suuralue")
get_classification("kunta")
get_regoinclassification("suuralue")
get_regionclassification("suuarlue")
get_regionclassification("suuralue")
data <- get_regionclassification(("seutukunta"))
head(dat)
head(dat)
head(data)
recode_region(data$seutukunta_code, to = "maakunta_code")
recode_region(data$seutukunta_code, to = "maakunta_name")
recode_region(data$seutukunta_code)
detect_region_year(data$seutukunta_code)
detect_region_level(data$seutukunta_code)
load_all()
recode_region(x = data$seutukunta_codem, to = "vaalipiiri")
recode_region(x = data$seutukunta_code, to = "vaalipiiri")
recode_region(x = data$seutukunta_code, to = "maakunta_code")
recode_region(x = data$seutukunta_code, to = "maakunta")
key <- get_regionkey("seutukunta", "vaalipiiri")
head(key)
statfi_recode(data$seutukunta_code, key, from = "seutukunta_code", to "vaalipiiri_name")
statfi_recode(data$seutukunta_code, key, from = "seutukunta_code", to = "vaalipiiri_name")
x <- data$seutukunta_code
x
from <- detect_region_level(x)
from
year_in_data <- detect_region_year(x, from)
if(is.null(year)) {
year <- get_latest_year(offline = TRUE)
}
year = NULL
if(is.null(year)) {
year <- get_latest_year(offline = TRUE)
}
if(!(year %in% year_in_data)) {
message(paste0("The region classification in data seems to fit to year(s) ",
paste(year_in_data, collapse = ", "),
". A key corresponding to this year is used."))
}
to = "vaalipiiri"
regionkey <- get_regionkey(from, to, year = year, offline = offline)
offline = TRUE
regionkey <- get_regionkey(from, to, year = year, offline = offline)
regionkey
if(all(is_region_code(x))) {
from <- paste0(from, "_code")
} else if(all(is_region_name(x))) {
from <- paste0(from, "_name")
} else {
stop("Input contains elements not region codes nor region names.")
}
from
to
recode_region(data$seutukunta_code, to = "vaalipiiri_code")
load_all()
recode_region(data$seutukunta_code, to = "vaalipiiri_code")
to <- "vaalipiiri_code"
gsub(".*_", "", to)
gsub("_.*", "", to)
load_all()
recode_region(data$seutukunta_code, to = "vaalipiiri_code")
to = "vaalipiiri"
gsub("_.*", "", to)
recode_region(data$seutukunta_code, to = c("vaalipiiri_name", vaalipiiri_code"))
recode_region(data$seutukunta_code, to = c("vaalipiiri_name", "vaalipiiri_code"))
to <- c("vaalipiiri_name", "vaalipiiri_code")
gsub("_.*", "", to)
from
regionkey <- get_regionkey(from, gsub("_.*", "", to), year = year, offline = offline)
regionkey <- get_regionkey(gsub("_.*", "", from),
gsub("_.*", "", to),
year = year,
offline = offline)
head(get_regionkey("kunta" ,"seutukunta", "seutukunta")
)
gsub("_.*", "", from)
gsub("_.*", "", to)
head(get_regionkey("kunta" ,"vaalipiiri"))
head(get_regionkey("kunta" ,"vaalipiiri", "vaalipiiri"))
head(get_regionkey("kunta" ,"suuralue", "suuralue"))
load_all()
head(get_regionkey("kunta" ,"suuralue", "suuralue"))
head(get_regionkey("kunta" ,"vaalipiiri", "vaalipiiri"))
regionkey <- get_regionkey(gsub("_.*", "", from),
gsub("_.*", "", to),
year = year,
offline = offline)
recode_region(data$seutukunta_code, to = c("vaalipiiri_name", "vaalipiiri_code"))
load_all()
head(dat)
head(data)
data %>% add_region(data, "maakunta_name")
to = "maakunta_name"
data %>% add_region(data, "maakunta_name", from = "seutukunta_code")
unique(data$seutukunta_code)
year = NULL
offline = TRUE
from = NULL
to <- unlist(list(...))
region_var <- detect_region_var(data, year = year, offline = offline)
region_var_name_lgl <- sapply(region_var, grepl, pattern = "name")
region_var_code_lgl <- sapply(region_var, grepl, pattern = "code")
region_var
region_var_name_lgl
if(any(region_var_name_lgl)) {
if(any(!is_region_name(data[[region_var[names(region_var)[region_var_name_lgl]]]]))) {
stop("Unknown region names.")
} }
if(any(region_var_code_lgl)) {
if(any(!is_region_code_with_prefix(data[[region_var[names(region_var)[region_var_code_lgl]]]]))) {
stop("Standardize your region codes first.")
}  }
from_key <- names(region_var)
if(is.null(from)) {
from <- region_var
names(from) <- NULL
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
from
to <- paste(to, gsub(".*_", "", from_key), sep = "_")
to
add_region(data, "maakunta")
from_key
to <- "maakunta_code"
new_var <- recode_region(x = data[[from]], to = to, year = year, offline = offline)
data[[from]]
from
data
head(data)
from
data[from]
new_var <- recode_region(x = data[from], to = to, year = year, offline = offline)
from_key <- names(region_var)[1]
region_var <- detect_region_var(data, year = year, offline = offline)[1]
region_var_name_lgl <- sapply(region_var, grepl, pattern = "name")
region_var_code_lgl <- sapply(region_var, grepl, pattern = "code")
if(any(region_var_name_lgl)) {
if(any(!is_region_name(data[[region_var[names(region_var)[region_var_name_lgl]]]]))) {
stop("Unknown region names.")
} }
if(any(region_var_code_lgl)) {
if(any(!is_region_code_with_prefix(data[[region_var[names(region_var)[region_var_code_lgl]]]]))) {
stop("Standardize your region codes first.")
}  }
from_key <- names(region_var)
if(is.null(from)) {
from <- region_var
names(from) <- NULL
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
from = NULL
if(is.null(from)) {
from <- region_var
names(from) <- NULL
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
new_var <- recode_region(x = data[from], to = to, year = year, offline = offline)
data[from]
head(data)
detect_region_level(data$seutukunta_code)
detect_region_level(data[[from]])
detect_region_level(data[from])
detect_region_level(data[[from,]])
new_var <- recode_region(x = data[[from]], to = to, year = year, offline = offline)
new_var
new_names <- c(names(data), to)
data <- cbind(data, data.frame(new_var))
names(data) <- new_names
data
load_all()
data
head(data)
data$maakunta_code <- NULL
add_region(data, "maakunta_code")
add_region(data, "maakunta_name")
add_region(data, "suuralue_name")
add_region(data, "suuralue")
add_region(data, "suuralue_code", "suuralue_name")
to <- c("kunta_code", "suuralue")
grepl("code", to)
sapply(c("code", "name") grepl, to)
sapply(c("code", "name"), grepl, to)
args(grepl)
sapply(c("code", "name"), grepl, x = to)
to
to[grepl("code", to) | grepl("name", to)]
grepl("code", to) | grepl("name", to)
to
!(grepl("code", to) | grepl("name", to))
to
to <- c(to, paste(to[!(grepl("code", to) | grepl("name", to))], c("code", "name"), sep = "_"))
to
to <- to[grepl("code", to) | grepl("name", to)]
to
load_all()
load_all()
head(data)
data %>% add_region("suuralue") %>% head()
data %>% add_region("suuralue", year = 2000) %>% head()
data %>% add_region("suuralue", year = 2005) %>% head()
data %>% add_region("suuralue_name") %>% head()
document()
install()
library(devtools)
install()
