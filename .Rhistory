detect_region_var(data)
data <- rename(data, kunta = kunta_name)
detect_region_var(data)
data <- names_to_codes(data, "kunta_name")
data <- names_to_codes(data, "kunta")
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
data <- get_regionkey() %>%
dplyr::select(kunta_code) %>%
mutate(values = rnorm(n()))
head(data)
detect_region_var(data)
detect_region_var <- function(data) {
regionkey <- get_regionkey()
for(var1 in names(data)) {
for(var2 in names(regionkey)) {
if(all(data[[var1]] %in% regionkey[[var2]])) {
i <- var1
return(i)
}
}
}
}
detect_region_var(data)
head(data)
data <- rename(data, Alue = kunta_code)
detect_region_var(data)
detect_region_var <- function(data) {
regionkey <- get_regionkey()
for(var1 in names(data)) {
for(var2 in names(regionkey)) {
if(all(data[[var1]] %in% regionkey[[var2]])) {
i <- var1
j <- var2
return(c(i,j))
}
}
}
}
detect_region_var(data)
load_all()
rm(detect_region_var)
load_all()
head(data)
add_region(data, to = "seutukunta")
head(data)
rename(data, "kunta" = "Alue") %>% head()
head(data)
from = NULL
if(is.null(from)) {
detected_region <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
detected_region <- rep(from, 2)
}
detected_region
regionkey <- dplyr::select(get_regionkey(year = year), to)
year <- NULL
regionkey <- dplyr::select(get_regionkey(year = year), to)
to <- "seutukunta"
to <- "seutukunta_name"
regionkey <- dplyr::select(get_regionkey(year = year), to)
regionkey <-rename(regionkey, detected_region[1] = detected_region[2])
regionkey <-rename_with(regionkey, ~detected_region[], detected_region[1])
regionkey <-rename_with(regionkey, ~detected_region[1], detected_region[2])
head(regionkey)
regionkey <- get_regionkey(year = year)
regionkey <-rename_with(regionkey, ~detected_region[1], detected_region[2])
head(regionkey)
regionkey <- dplyr::select(detected_region[1], to)
regionkey <- dplyr::select(regionkey, detected_region[1], to)
head(regionkey)
df <- dplyr::left_join(data, regionkey, by = detected_region[1])
head(df)
load_all()
head(data)
recode(data, "seutukunta_code") %>% head()
recode(data, to = "seutukunta_code") %>% head()
to <- "seutukunta_code"
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
load_all()
head(data)
recode(data, to = "seutukunta_code") %>% head()
to
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
regionkey <- get_regionkey(year = year)
regionkey <- dplyr::rename_with(regionkey, ~from[1], from[2])
regionkey <- dplyr::select(regionkey, from[1], to)
head(regionkey)
df <- dplyr::left_join(data, regionkey, by = from[1])
head(df)
if(leave == FALSE) {
df <- dplyr::select(df, -from[1])
}
load_all()
recode(data, to = "seutukunta_code") %>% head()
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
regionkey <- get_regionkey(year = year)
regionkey <- dplyr::rename_with(regionkey, ~from[1], from[2])
head(regionkey)
head(data)
from
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
from  <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
regionkey <- get_regionkey(year = year)
regionkey <- dplyr::rename_with(regionkey, ~from[1], from[2])
head(regionkey)
data <- rename(data, Alue = kunta_name)
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
regionkey <- get_regionkey(year = year)
regionkey <- dplyr::rename_with(regionkey, ~from[1], from[2])
head(regionkey)
from
gsub("_", "", from[2])
gsub("_*", "", from[2])
gsub("_.*", "", from[2])
to <- paste(gsub("_.*", "", from[2]), "code", sep = "_")
to
head(data)
from_orig <- "Alue"
from <- "kunta_name"
to <- "seutukunta_name"
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
head(regionkey)
regionkey <- dplyr::rename(regionkey, from_orig = from)
head(regionkey)
df <- dplyr::left_join(data, regionkey, by = from_orig)
regionkey <- dplyr::rename_with(regionkey, from_orig = from)
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
regionkey <- dplyr::rename_with(regionkey, Â¨~from_orig, from)
regionkey <- dplyr::rename_with(regionkey, ~from_orig, from)
head(regionkey)
df <- dplyr::left_join(data, regionkey, by = from_orig)
head(df)
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
regionkey <- get_regionkey(year = year)
regionkey <- dplyr::rename_with(regionkey, ~from[1], from[2])
to <- paste(gsub("_.*", "", from[2]), "code", sep = "_")
from
to
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_name) %>%
#'                mutate(values = rnorm(n()))
#'     # Recode
#'     recode(data, "kunta_name", "kunta_code", year = 2020)
#'
#' # Add seutukunnat to municipal data
#'
#'     recode(data, "kunta_name", "seutukunta_name", year = 2020, leave = TRUE)
#'
recode <- function(data, from_orig, from, to, year = NULL, leave = FALSE) {
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
regionkey <- dplyr::rename_with(regionkey, ~from_orig, from)
df <- dplyr::left_join(data, regionkey, by = from_orig)
if(leave == FALSE) {
df <- dplyr::select(df, -from[1])
}
df
}
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
to
from
from_orig = from[1]
from = from[2]
to = to
from_orig
from
to
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
head(regionkey)
regionkey <- dplyr::rename_with(regionkey, ~from_orig, from)
head(regionkey)
head(data)
from_orig
df <- dplyr::left_join(data, regionkey, by = from_orig)
df
head(df)
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_name) %>%
#'                mutate(values = rnorm(n()))
#'     # Recode
#'     recode(data, "kunta_name", "kunta_code", year = 2020)
#'
#' # Add seutukunnat to municipal data
#'
#'     recode(data, "kunta_name", "seutukunta_name", year = 2020, leave = TRUE)
#'
recode <- function(data, from_orig, from, to, year = NULL, leave = FALSE) {
regionkey <- dplyr::select(get_regionkey(year = year), to, from)
regionkey <- dplyr::rename_with(regionkey, ~from_orig, from)
df <- dplyr::left_join(data, regionkey, by = from_orig)
if(leave == FALSE) {
df <- dplyr::select(df, -from_orig)
}
df
}
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
year
year <- NULL
head
head(data)
from_orig
from
to
recode(data, from_orig, from, to)
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
to <- paste(gsub("_.*", "", from[2]), "code", sep = "_")
from
to
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
head(df)
df <- dplyr::relocate(df, paste(region, "code", sep = "_"))
df <- dplyr::relocate(df, paste(from, "code", sep = "_"))
df <- dplyr::relocate(df, to)
head(df)
#'
#'#' # Replace municipality names by their codes
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_name) %>%
#'                mutate(values = rnorm(n()))
#'
#'     names_to_codes(data, region = "kunta", year = 2020)
#'
names_to_codes <- function(data, from = NULL, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from[2]), "code", sep = "_")
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
df <- dplyr::relocate(df, to)
df
}
head(data)
names_to_codes(data) %>% head()
names_to_codes(data) %>% data2
names_to_codes(data) -> data2
head(data2)
codes_to_names(data2) %>% head()
#'
#' @examples
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_code) %>%
#'                mutate(values = rnorm(n()))
#'
#'        codes_to_names(data, region = "kunta", year = 2020)
#'
codes_to_names <- function(data, from, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from[2]), "name", sep = "_")
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
df <- dplyr::relocate(df, to)
df
}
#'
#' @examples
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_code) %>%
#'                mutate(values = rnorm(n()))
#'
#'        codes_to_names(data, region = "kunta", year = 2020)
#'
codes_to_names <- function(data, from, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from[2]), "name", sep = "_")
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
df <- dplyr::relocate(df, to)
df
}
codes_to_names(data2) %>% head()
#'
#' @examples
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_code) %>%
#'                mutate(values = rnorm(n()))
#'
#'        codes_to_names(data, region = "kunta", year = 2020)
#'
codes_to_names <- function(data, from = NULL, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from[2]), "name", sep = "_")
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
df <- dplyr::relocate(df, to)
df
}
#'
#' @examples
#'
#'     # Generate random municipal data
#'        data <- get_regionkey(year = 2020) %>%
#'                dplyr::select(kunta_code) %>%
#'                mutate(values = rnorm(n()))
#'
#'        codes_to_names(data, region = "kunta", year = 2020)
#'
codes_to_names <- function(data, from = NULL, year = NULL) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
to <- paste(gsub("_.*", "", from[2]), "name", sep = "_")
df <- recode(data, from_orig = from[1], from = from[2], to = to, year = year)
df <- dplyr::relocate(df, to)
df
}
codes_to_names(data2) %>% head()
#'
#' @param data
#' @param from
#' @param to
#'
#' @return
#' @export
#'
#' @examples
#'
add_region <- function(data, from = NULL, to) {
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
recode(data, from_orig = from[1], from = from[2] , to = to, leave = TRUE)
}
head(data)
data %>% add_region(to = "seutukunta")
data %>% add_region(to = "seutukunta_name")
data %>% add_region(to = "seutukunta_name") %>% head()
rm(list = ls())
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
mutate(values = rnorm(n()))
load_all()
head(data)
data %>% add_region("seutukunta_name")
data %>% add_region("seutukunta_name") %>% head()
data %>% add_region("kunta_code") %>% head()
document()
load_all()
sample(letters, 1)
sample(letters, 1)
sample(letters, 4)
sample(letters, 4) %>% paste0
sample(letters, 4) %>% paste0()
paste0(sample(letters, 4))
paste0(sample(letters, 4), collapse = TRUE)
args(paste0)
args(paste)
help(paste)
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste0(sample(letters, 4), collapse = "")
paste(sample(letters, 4), collapse = "")
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
rename_with(~paste(sample(letters, 4), collapse = ""))
mutate(values = rnorm(n()))
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
dplyr::rename_with(~paste(sample(letters, 4), collapse = "")) %>%
dplyr::mutate(values = rnorm(n()))
head(data)
detect_region_var(data)
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
gsub("_.*", "", from[2])
gsub(".*_", "", from[2])
load_all()
head(data)
data %>% add_region("suuralue")
to <- "suuralue"
from <- NULL
if(is.null(from)) {
from <- detect_region_var(data)
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
} else {
from <- rep(from, 2)
}
from
if(!(to %in% c("kunta", "seutukunta", "maakunta", "suuralue"))) {
stop("Argument to has to be either 'kunta', 'seutukunta', 'maakunta' or 'suuralue'")
}
to <- paste(gsub("_.*", "", from[2]), gsub(".*_", "", from[2]))
to
to <- paste(gsub("_.*", "", from[2]), gsub(".*_", "", from[2]), sep = "_")
to
load_all()
data %>% add_region("suuralue")
to
to <- paste(to, gsub(".*_", "", from[2]), sep = "_")
to
to <- "suuralue"
to <- paste(to, gsub(".*_", "", from[2]), sep = "_")
to
load_all()
data %>% add_region("suuralue") %>% head()
document()
