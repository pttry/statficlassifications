}
#' @describeIn set_region_codes
#'
set_region_codes_fct <- function(x) {
levels(x) <- set_region_codes_vct(levels(x))
x
}
#' @describeIn set_region_codes
#'
set_region_codes_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- set_region_codes_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- set_region_codes_fct(x[[col]])
}
x
}
v <- c("020", "047", "15", "133")
set_region_codes(v)
v <- c("Akaa" = "020", "Enontekiö" = "047", "Pohjanmaa" = "15", "Keuruu" =  "133")
set_region_codes(v)
v <- c("020" = "Akaa", "KU047" = "Enontekiö", "15" = "Pohjanmaa", "SK133" = "Keuruu")
set_region_codes(names(v))
f <- factor(c("020", "047", "15", "133"))
set_region_codes(f)
df <- data.frame(kunta_code = c("020", "047", "15", "133"), values = rnorm(4))
set_region_codes(df)
set_region_codes(df, "kunta_code")
#' Changes region codes to region names
#'
#' A wrapper that uses the statficlassifications::recode-function.
#'
#' @param data data.frame, the input data that contains a variable of region codes.
#' @param region character, the name of the variable of region codes.
#' @param year integer, the year of the applied classification key.
#'
#' @return data.frame
#' @export
#'
#' @examples
#'
#'   v <- c("SSS", "KU103", "KU061","SK213", "MK04")
#'   codes_to_names_vct(v)
#'   f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
#'   codes_to_names_vct(f)
#'   df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(n()))
#'   codes_to_names(df, "kunta_code")
#
#'
#'
codes_to_names <- function(x, col = NULL) {
if(is.vector(x)){
x <- codes_to_names_vct(x)
} else if(is.factor(x)) {
x <- codes_to_names_fct(x)
} else if(is.data.frame(x)) {
x <- codes_to_names_df(x, col)
} else {
stop("Argument not a vector, factor nor a data.frame.")
}
x
}
#' @describeIn codes_to_names
#'
codes_to_names_vct <- function(x) {
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_code = x), region_codes_names, by = "alue_code")$alue_name
x(names) <- x_names
x
}
#' @describeIn codes_to_names
#'
codes_to_names_fct <- function(x) {
levels(x) <- codes_to_names_vct(levels(x))
x
}
#' @describeIn set_region_codes
#'
codes_to_names_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- codes_to_names_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- codes_to_names_fct(x[[col]])
}
x
}
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names_vct(v)
x <- v
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_code = x), region_codes_names, by = "alue_code")$alue_name
x(names) <- x_names
x(names) <- x_names
x_names
x(names)
names(x) <- x_names
names(x)
#' @describeIn codes_to_names
#'
codes_to_names_vct <- function(x) {
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_code = x), region_codes_names, by = "alue_code")$alue_name
names(x) <- x_names
x
}
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names_vct(v)
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names_vct(f)
codes_to_names_vct(f) -> is.factor()
codes_to_names_vct(f) %>% is.factor()
f
x <- f
levels(x)
x
codes_to_names_vct(levels(x))
levels(x) <- codes_to_names_vct(levels(x))
x
#' @describeIn codes_to_names
#'
codes_to_names_fct <- function(x) {
levels(x) <- codes_to_names_vct(levels(x))
x
}
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names_fct(f)
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(n()))
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(4)
)
df
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(4))
df <- data.frame(kunta_code = c("SSS", "KU103", "KU061","SK213", "MK04"), values = rnorm(5))
df
codes_to_names(df, "kunta_code")
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names(v)
#' Changes region codes to region names
#'
#' A wrapper that uses the statficlassifications::recode-function.
#'
#' @param data data.frame, the input data that contains a variable of region codes.
#' @param region character, the name of the variable of region codes.
#' @param year integer, the year of the applied classification key.
#'
#' @return data.frame
#' @export
#'
#' @examples
#'
#'   v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
#'   names_to_codes_vct(v)
#'   f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
#'   names_to_codes_fct(f)
#'   df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"),
#'                    values = rnorm(5))
#'   names_to_codes(df, "kunta_name")
#
#'
#'
names_to_codes <- function(x, col = NULL) {
if(is.vector(x)){
x <- names_to_codes_vct(x)
} else if(is.factor(x)) {
x <- names_to_codes_fct(x)
} else if(is.data.frame(x)) {
x <- names_to_codes_df(x, col)
} else {
stop("Argument not a vector, factor nor a data.frame.")
}
x
}
#' @describeIn codes_to_names
#'
names_to_codes_vct <- function(x) {
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")$alue_code
names(x) <- x_names
x
}
#' @describeIn codes_to_names
#'
names_to_codes_fct <- function(x) {
levels(x) <- names_to_codes_vct(levels(x))
x
}
#' @describeIn set_region_codes
#'
names_to_codes_df <- function(x, col) {
if(is.vector(x[[col]])) {
x[[col]] <- names_to_codes_vct(x[[col]])
} else if(is.factor(x[[col]])) {
x[[col]] <- names_to_codes_fct(x[[col]])
}
x
}
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
names_to_codes_fct(f)
f
levels(f)
x <- f
names_to_codes_vct(levels(x))
x
levels(x) <- names_to_codes_vct(levels(x))
x
x <- f
levels(x)
names_to_codes_vct(levels(x))
f
f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
f
names_to_codes_vct(levels(x))
x <- f
x
levels(x)
names_to_codes_vct(levels(x))
x
x <- levels(x)
x
x_names <- names(x)
x_names
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
region_codes_names
dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"),
values = rnorm(5))
names_to_codes(df, "kunta_name")
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
x <- v
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")$alue_code
x
#' @describeIn codes_to_names
#'
names_to_codes_vct <- function(x) {
l <- length(x)
x_names <- names(x)
region_codes_names <- get_full_region_code_name_key(offline = TRUE)
x <- dplyr::left_join(data.frame(alue_name = x), region_codes_names, by = "alue_name")$alue_code
names(x) <- x_names
if(length(x) > l) stop("Some region name(s) can be mapped to multiple region codes!")
x
}
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
f <- factor(c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"))
names_to_codes_fct(f)
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta"),
values = rnorm(5))
names_to_codes(df, "kunta_name")
v <- c("KOKO MAA", "Humppila", "Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
v <- c("KOKO MAA", "Humppila", "Forssa","Ålands skärgård", "Satakunta")
names_to_codes_vct(v)
f <- factor(c("KOKO MAA", "Humppila","Ålands skärgård", "Satakunta"))
names_to_codes_fct(f)
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Ålands skärgård", "Satakunta"),
values = rnorm(5))
df <- data.frame(kunta_name = c("KOKO MAA", "Humppila", "Ålands skärgård", "Satakunta"),
values = rnorm(4))
names_to_codes(df, "kunta_name")
df
document()
rm(list = ls())
gc()
document()
check()
document()
check()
.Last.error.trace
load_all()
check()
install()
document()
help("purrr)
help("rlang")
library(rlang)
help("rlang")
ls("package:rlang")
warn
validate_signal_message
invisible(NULL)
"seq_alonq" %in% ls("package:rlang")
"seq2_alonq" %in% ls("package:rlang")
"seq2_along" %in% ls("package:rlang")
"seq_along" %in% ls("package:rlang")
seq2_along(1:4)
args(seq2_along)
args(seq_along)
library(devtools)
usethis::use_vignette("vignette")
usethis::use_vignette("vignette_region_classifications")
usethis::use_pipe()
load_all()
search_keys()
document()
load_all()
search_keys()
library(devtools)
document8)
document()
search_keys()
document()
load_all()
load_all()
search_keys(source = "kunta", target = "maakunta", year = 2020)
search_keys(searchterms_source = "kunta", searchword_target = "maakunta", year = 2020)
search_keys(searchterms_source = "kunta", searchword_target = "maakunta")
args(search_keys)
search_keys(source_searchterm = "kunta", target_searchterm = "maakunta", year = 2020)
args(search_keys)
load_all()
search_keys)()
search_keys()
search_keys("suuralue")
search_keys(source = "kunta", target = "suuralue")
search_keys(source= "kunta", target= "maakunta", year = 2020)
search_keys(source= "kunta", target= "suuralue", year = 2020)
search_keys(source= "kunta", target= "suuralue")
search_keys(source = "kunta", target = "suuralue", year = 2020)
search_keys(source = "kunta", target = "suuralue", year = 2020, as_localID = TRUE)
load_all()
search_keys(source = "kunta", target = "suuralue", year = 2020, as_localID = TRUE)
search_keys(source = "kunta", target = "suuralue", year = 2020)
install()
load_all()
key <- get_regionkey()
head(key)
v <- c("020", "047", "15", "133")
v
set_region_codes(v)
v <- set_region_codes(v)
codes_to_names(v)
names_to_codes(v)
v <- codes_to_names(v)
v <- c("020", "047", "15", "181")
set_region_codes(v)
v <- c("020", "047", "15", "193")
set_region_codes(v)
v <- set_region_codes(v)
codes_to_names(v)
v <- codes_to_names(v)
names_to_codes(v)
library(rlang)
install.packages("rlang")
install.packages("rlang")
devtools::load_all()
search_keys("mannersu")
search_keys(as_localID = TRUE)[1]
search_keys(as_localID = TRUE)[2]
search_keys(as_localID = TRUE)[3]
search_keys(as_localID = TRUE)[1:10]
search_keys(source = "kunta", target = "seutukunta")
search_keys(source = "kunta", target = "seutukunta", as_localID = TRUE)
search_keys(source = "kunta", target = "seutukunta", as_localID = TRUE)
search_keys(source = "kunta", target = "seutukunta", as_localID = TRUE, year = 2002)
search_keys(source = "kunta", target = "seutukunta", as_localID = TRUE, year = 2020)
access_API("kunta_1_20200101%23seutukunta_1_20200101")
access_API("kunta_1_20200101%23seutukunta_1_20200101", content = "url)
access_API("kunta_1_20200101%23seutukunta_1_20200101", content = "url")
names(roxygen2:::default_tags())
document()
library(devtools)
document8)
document()
help(access_API)
document()
help(access_API
)
document()
help(get_url)
urls <- get_url()
urls
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/correspondenceTables/")))
results <- tidyr::separate(urls, url, c("source", "temp_var", "date2"), sep = "_\\d+_") %>%
tidyr::separate(temp_var, c("date1", "target"), sep = "#") %>%
dplyr::mutate(year1 = as.double(substring(date1, 1,4)),
year2 = as.double(substring(date2, 1,4)))
results
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/correspondenceTables/")))
urls
urls <- get_url()
url_df <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/correspondenceTables/")))
tidyr::separate(url_df, url, c("source", "temp_var", "date2"), sep = "_\\d+_") %>%
tidyr::separate(temp_var, c("date1", "target"), sep = "#") %>%
dplyr::mutate(year1 = substring(date1, 1,4),
date1 = substring(date1, 5,8),
year2 = substring(date2, 1,4),
date2 = substring(date2, 5,8))
load_all()
get_latest_year()
load_all()
urls <- get_url()
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/correspondenceTables/")))
nros <- as.data.frame(matrix(unlist(lapply(urls, stringr::str_extract_all, "_\\d+_")), ncol = 2, byrow = TRUE))
names(nros) <- paste0("nro", 1:2)
tidyr::separate(urls, url, c("source", "temp_var", "date2"), sep = "_\\d+_") %>%
tidyr::separate(temp_var, c("date1", "target"), sep = "#") %>%
dplyr::mutate(year1 = substring(date1, 1,4),
date1 = substring(date1, 5,8),
year2 = substring(date2, 1,4),
date2 = substring(date2, 5,8))
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/correspondenceTables/")))
nros <- as.data.frame(matrix(unlist(lapply(urls, stringr::str_extract_all, "_\\d+_")), ncol = 2, byrow = TRUE))
names(nros) <- paste0("nro", 1:2)
results <- tidyr::separate(urls, url, c("source", "temp_var", "date2"), sep = "_\\d+_") %>%
tidyr::separate(temp_var, c("date1", "target"), sep = "#") %>%
dplyr::mutate(year1 = substring(date1, 1,4),
date1 = substring(date1, 5,8),
year2 = substring(date2, 1,4),
date2 = substring(date2, 5,8))
cbind(results, nros)
load_all()
get_latest_year()
results <- urls_as_localId_df(get_url())
results1 <- results
urls <- get_url()
urls <- as.data.frame(sapply(urls, stringr::str_remove,
paste0("https://data.stat.fi/api/classifications/v2/correspondenceTables/")))
nros <- as.data.frame(matrix(unlist(lapply(urls, stringr::str_extract_all, "_\\d+_")), ncol = 2, byrow = TRUE))
names(nros) <- paste0("nro", 1:2)
results <- tidyr::separate(urls, url, c("source", "temp_var", "date2"), sep = "_\\d+_") %>%
tidyr::separate(temp_var, c("date1", "target"), sep = "#") %>%
dplyr::mutate(year1 = substring(date1, 1,4),
date1 = substring(date1, 5,8),
year2 = substring(date2, 1,4),
date2 = substring(date2, 5,8))
results <- cbind(results, nros)
identical(results1, results)
load_all()
search_keys()
search_keys(source = "kunta", target = "maakunta")
load_all()
search_keys(source = "kunta", target = "maakunta")
search_keys("kunta", "maakunta")
results <- urls_as_localId_df(get_url())
results
load_all()
search_keys()
search_keys(source = "kunta", target = "maakunta")
load_all()
search_keys(source = "kunta", target = "maakunta")
named_vector <- c("year" = 2020, date = "0101")
named_vector
attach(named_vector)
document()
Sys.Date()
as.double(substring(Sys.Date(), 1,4))
sys_current_month <- as.double(substring(Sys.Date(), 6,7))
sys_current_month
load_all()
get_latest_year()
load_all()
get_latest_year()
get_latest_year(offline = FALSE)
#' Get the year of the latest correspondence table
#'
#' @return double, the year of the newest correspondence table
#' @export
#'
#'
#' @examples
#'
#'  get_latest_year()
#'
get_latest_year <- function(offline = TRUE) {
if(offline) {
sys_current_year <- as.double(substring(Sys.Date(), 1,4))
sys_current_month <- as.double(substring(Sys.Date(), 6,7))
if(sys_current_month == 1) {
warning("In January, the offline latest year is the last year in case no fresh keys updated.")
return(sys_current_year - 1)
} else {
sys_current_year
}
} else {
urls <- get_url()
results <- urls_as_localId_df(urls)
as.double(max(c(results$year1, results$year2)))
}
}
rm(list = ls())
load_all()
get_latest_year(offline = FALSE)
get_latest_year()
load("C:/Users/juhoa/git_clones/statficlassifications/data/prefix_name_key.rda")
prefix_name_key
data(prefix_name_key)
prefix_name_key[-(1:2)]
prefix_name_key$prefix[-(1:2)]
load_all()
key <- get_regionkey()
head(key)
key <- get_regionkey(source = "seutukunta", target = "suuralue")
head(key)
key <- get_regionkey(source = "seutukunta", target = "suuralue", year = 2010)
head(key)
load("C:/Users/juhoa/git_clones/statficlassifications/data/codes_names_key.rda")
head(codes_names_key)
