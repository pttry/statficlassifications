dplyr::distinct
region_code_prefixes
name_to_prefix(c("maakunta", "seutukunta"))
load_all()
head(get_regionkey("maakunta", "seutukunta")
)
name_to_prefix("kunta")
load_all()
head(get_regionkey("maakunta", "seutukunta"))
get_regionkey("maakunta", "suuralue", only_codes = TRUE)
search_keys()
key <- get_regionkey("kunta", "sairaanhoitop")
key <- get_regionkey("kunta", "maakunta")
head(key)
key <- get_regionkey("kunta", "suuralue")
key <- get_regionkey("kunta", "seutukunta")
head(key)
regions <- c("kunta", "maakunta")
regionkey <- statficlassifications::regionkey
head(regionkey)
regionkey <- dplyr::select(regionkey, contains(regions))
head(regionkey)
regions
load_all()
regions <- c("kunta", "maakunta")
key <- get_regionkey("kunta", "maakunta")
load_all()
key <- get_regionkey("kunta", "maakunta")
head(key)
key <- get_regionkey("kunta", "suuralue")
load_all()
key <- get_regionkey("kunta", "suuralue")
head(key)
key <- get_regionkey("kunta", "sairaanhoitop")
head(key)
search_keys()
key <- get_regionkey("kunta", "tyossakayntial")
head(key)
key <- get_regionkey("maakunta", "vaalipiiri")
head(key)
search_keys("maakunta", "vaalipiiri")
search_keys("vaalipiiri")
head(get_regionclassification("kunta"))
key <- get_regionkey("maakunta", "vaalipiiri", offline = FALSE)
head(key)
get_regionclassification("suuralue")
get_regionclassification("suuralue", year = 2010)
get_regionclassification("suuralue", year = 2010, offline = FALSE)
load_all()
get_regionclassification("suuralue", year = 2010, offline = FALSE)
key <- get_regionclassification()
head(key)
tail(key)
load_all()
key <- get_regionclassification()
head(key)
tail(key)
install()
get_regionkey("suuralue")
get_classification("suuralue")
get_classification("kunta")
get_regoinclassification("suuralue")
get_regionclassification("suuarlue")
get_regionclassification("suuralue")
data <- get_regionclassification(("seutukunta"))
head(dat)
head(dat)
head(data)
recode_region(data$seutukunta_code, to = "maakunta_code")
recode_region(data$seutukunta_code, to = "maakunta_name")
recode_region(data$seutukunta_code)
detect_region_year(data$seutukunta_code)
detect_region_level(data$seutukunta_code)
load_all()
recode_region(x = data$seutukunta_codem, to = "vaalipiiri")
recode_region(x = data$seutukunta_code, to = "vaalipiiri")
recode_region(x = data$seutukunta_code, to = "maakunta_code")
recode_region(x = data$seutukunta_code, to = "maakunta")
key <- get_regionkey("seutukunta", "vaalipiiri")
head(key)
statfi_recode(data$seutukunta_code, key, from = "seutukunta_code", to "vaalipiiri_name")
statfi_recode(data$seutukunta_code, key, from = "seutukunta_code", to = "vaalipiiri_name")
x <- data$seutukunta_code
x
from <- detect_region_level(x)
from
year_in_data <- detect_region_year(x, from)
if(is.null(year)) {
year <- get_latest_year(offline = TRUE)
}
year = NULL
if(is.null(year)) {
year <- get_latest_year(offline = TRUE)
}
if(!(year %in% year_in_data)) {
message(paste0("The region classification in data seems to fit to year(s) ",
paste(year_in_data, collapse = ", "),
". A key corresponding to this year is used."))
}
to = "vaalipiiri"
regionkey <- get_regionkey(from, to, year = year, offline = offline)
offline = TRUE
regionkey <- get_regionkey(from, to, year = year, offline = offline)
regionkey
if(all(is_region_code(x))) {
from <- paste0(from, "_code")
} else if(all(is_region_name(x))) {
from <- paste0(from, "_name")
} else {
stop("Input contains elements not region codes nor region names.")
}
from
to
recode_region(data$seutukunta_code, to = "vaalipiiri_code")
load_all()
recode_region(data$seutukunta_code, to = "vaalipiiri_code")
to <- "vaalipiiri_code"
gsub(".*_", "", to)
gsub("_.*", "", to)
load_all()
recode_region(data$seutukunta_code, to = "vaalipiiri_code")
to = "vaalipiiri"
gsub("_.*", "", to)
recode_region(data$seutukunta_code, to = c("vaalipiiri_name", vaalipiiri_code"))
recode_region(data$seutukunta_code, to = c("vaalipiiri_name", "vaalipiiri_code"))
to <- c("vaalipiiri_name", "vaalipiiri_code")
gsub("_.*", "", to)
from
regionkey <- get_regionkey(from, gsub("_.*", "", to), year = year, offline = offline)
regionkey <- get_regionkey(gsub("_.*", "", from),
gsub("_.*", "", to),
year = year,
offline = offline)
head(get_regionkey("kunta" ,"seutukunta", "seutukunta")
)
gsub("_.*", "", from)
gsub("_.*", "", to)
head(get_regionkey("kunta" ,"vaalipiiri"))
head(get_regionkey("kunta" ,"vaalipiiri", "vaalipiiri"))
head(get_regionkey("kunta" ,"suuralue", "suuralue"))
load_all()
head(get_regionkey("kunta" ,"suuralue", "suuralue"))
head(get_regionkey("kunta" ,"vaalipiiri", "vaalipiiri"))
regionkey <- get_regionkey(gsub("_.*", "", from),
gsub("_.*", "", to),
year = year,
offline = offline)
recode_region(data$seutukunta_code, to = c("vaalipiiri_name", "vaalipiiri_code"))
load_all()
head(dat)
head(data)
data %>% add_region(data, "maakunta_name")
to = "maakunta_name"
data %>% add_region(data, "maakunta_name", from = "seutukunta_code")
unique(data$seutukunta_code)
year = NULL
offline = TRUE
from = NULL
to <- unlist(list(...))
region_var <- detect_region_var(data, year = year, offline = offline)
region_var_name_lgl <- sapply(region_var, grepl, pattern = "name")
region_var_code_lgl <- sapply(region_var, grepl, pattern = "code")
region_var
region_var_name_lgl
if(any(region_var_name_lgl)) {
if(any(!is_region_name(data[[region_var[names(region_var)[region_var_name_lgl]]]]))) {
stop("Unknown region names.")
} }
if(any(region_var_code_lgl)) {
if(any(!is_region_code_with_prefix(data[[region_var[names(region_var)[region_var_code_lgl]]]]))) {
stop("Standardize your region codes first.")
}  }
from_key <- names(region_var)
if(is.null(from)) {
from <- region_var
names(from) <- NULL
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
from
to <- paste(to, gsub(".*_", "", from_key), sep = "_")
to
add_region(data, "maakunta")
from_key
to <- "maakunta_code"
new_var <- recode_region(x = data[[from]], to = to, year = year, offline = offline)
data[[from]]
from
data
head(data)
from
data[from]
new_var <- recode_region(x = data[from], to = to, year = year, offline = offline)
from_key <- names(region_var)[1]
region_var <- detect_region_var(data, year = year, offline = offline)[1]
region_var_name_lgl <- sapply(region_var, grepl, pattern = "name")
region_var_code_lgl <- sapply(region_var, grepl, pattern = "code")
if(any(region_var_name_lgl)) {
if(any(!is_region_name(data[[region_var[names(region_var)[region_var_name_lgl]]]]))) {
stop("Unknown region names.")
} }
if(any(region_var_code_lgl)) {
if(any(!is_region_code_with_prefix(data[[region_var[names(region_var)[region_var_code_lgl]]]]))) {
stop("Standardize your region codes first.")
}  }
from_key <- names(region_var)
if(is.null(from)) {
from <- region_var
names(from) <- NULL
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
from = NULL
if(is.null(from)) {
from <- region_var
names(from) <- NULL
} else if(!(from %in% names(data))) {
stop("input to argument 'from' not in the data!")
}
new_var <- recode_region(x = data[from], to = to, year = year, offline = offline)
data[from]
head(data)
detect_region_level(data$seutukunta_code)
detect_region_level(data[[from]])
detect_region_level(data[from])
detect_region_level(data[[from,]])
new_var <- recode_region(x = data[[from]], to = to, year = year, offline = offline)
new_var
new_names <- c(names(data), to)
data <- cbind(data, data.frame(new_var))
names(data) <- new_names
data
load_all()
data
head(data)
data$maakunta_code <- NULL
add_region(data, "maakunta_code")
add_region(data, "maakunta_name")
add_region(data, "suuralue_name")
add_region(data, "suuralue")
add_region(data, "suuralue_code", "suuralue_name")
to <- c("kunta_code", "suuralue")
grepl("code", to)
sapply(c("code", "name") grepl, to)
sapply(c("code", "name"), grepl, to)
args(grepl)
sapply(c("code", "name"), grepl, x = to)
to
to[grepl("code", to) | grepl("name", to)]
grepl("code", to) | grepl("name", to)
to
!(grepl("code", to) | grepl("name", to))
to
to <- c(to, paste(to[!(grepl("code", to) | grepl("name", to))], c("code", "name"), sep = "_"))
to
to <- to[grepl("code", to) | grepl("name", to)]
to
load_all()
load_all()
head(data)
data %>% add_region("suuralue") %>% head()
data %>% add_region("suuralue", year = 2000) %>% head()
data %>% add_region("suuralue", year = 2005) %>% head()
data %>% add_region("suuralue_name") %>% head()
document()
install()
library(devtools)
install()
library(tidyverse)
df <- data.frame(a = 1:10, b = letters[1:10])
df
df |> select(a)
df |> mutate(a2 = 2*a)
library(devtools)
load_all()
get_url()
urls <- get_url(classification_service = "classifications")
urls
urls_as_localId_df(urls)
urls_as_localId_df(urls) -> df1
load_all()
urls_as_localId_df(urls) -> df2
identical(df1, df2)
load_all()
urls_as_localId_df(urls) -> df2
identical(df1, df2)
check()
traceback()
df <- get_regionclassification("kunta", year = 2010)
load_all()
df <- get_regionclassification("kunta", year = 2010)
df
detect_region_year(df$kunta_name, region_level = "kunta")
x <- df$kunta_name
region_level <- "kunta"
statficlassifications::number_of_regions |>
dplyr::filter(region_level == region_level,
number_of_regions == length(unique(x)))
dplyr::filter(region_level == region_level,
number_of_regions == length(unique(x))) %>%
`$`(year)
statficlassifications::number_of_regions |>
dplyr::filter(region_level == region_level,
number_of_regions == length(unique(x))) %>%
`$`(year)
(statficlassifications::number_of_regions |>
dplyr::filter(region_level == region_level,
number_of_regions == length(unique(x))))$year
check()
check()
document()
chi <- seq(from = 0, to = 1, by = 0.01)
p <- 0.4
lambda <- 0.5
r <- p / (p + chi * (1-lambda)*(1-p))
plot(chi, r)
chi
r
paste(letters[1:4], 1:4)
paste(chi, r, sep = ",")
paste(paste(chi, r, sep = ","), collapse = ")--(")
install.packages("rsdmx")
library(rsdmx)
url <- "https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=sdmx_2.1_generic"
data <- readSDMX(url)
url <- "https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=sdmx_2.0_generic"
data <- readSDMX(url)
url <- "https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/dataflow/EMPL/LMP_EXPME$FI/1.0?references=descendants&detail=referencepartial&format=sdmx_2.1_generic"
data <- readSDMX(url)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
data
dim(data)
data <- as.data.frame(data)
data
data <- tibble(data)
library(tidyverse)
data <- tibble(data)
head(data)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
head(data)
names(data) <- c(var, names(data)[-1])
data
head(data)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
names(data) <- c("var", names(data)[-1])
head(data)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
head(data)
var_names <- names(data)[1]
strsplit(var_names, ".")
var_names
strsplit(var_names, "\\.")
unlist(strsplit(var_names, "\\."))
unlist(strsplit(names(data)[1], "\\."))
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
separate(data, var, into = var_names, sep = ";")
data <- separate(data, var, into = var_names, sep = ";")
args(gather)
data <- gather(data, time, value, contains("X"))
data
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
data <- separate(data, var, into = var_names, sep = ";")
gather(data, time, value, contains("X"))
head(data)
paste0("X", 1997:2019)
gather(data, time, value, paste0("X", 1997:2019))
data <- mutate(time = substring(time, 2,5))
data <- mutate(data, time = substring(time, 2,5))
data <- mutate(data, time = gsub("X", "", time))
data <- gather(data, time, value, paste0("X", 1997:2019))
data <- mutate(data, time = gsub("X", "", time))
head(sdata)
head(data)
data <- select(data, -TIME_PERIOD)
head(data)
df <- filter(data, LMP_TYPE == 1, EXPTYPE == "XEMP")
tail(df)
unique(data$EXPTYPE)
df <- filter(data, LMP_TYPE == 1, EXPTYPE == "XTOT")
head(df)
tail8df
tail8df)
tail(df)
unique(data$LMP_TYPE)
data <- separate(data, value, into = c("value", "estimated"), sep = " ")
head(data)
data <- mutate(data, estimated = ifelse(length(estimated) > 0, TRUE, FALSE))
head(data)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
data <- separate(data, var, into = var_names, sep = ";")
data <- gather(data, time, value, paste0("X", 1997:2019))
data <- mutate(data, time = gsub("X", "", time))
data <- select(data, -TIME_PERIOD)
data <- separate(data, value, into = c("value", "estimated"), sep = " ")
unique(data$estimated)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
data <- separate(data, var, into = var_names, sep = ";")
data <- gather(data, time, value, paste0("X", 1997:2019))
data <- mutate(data, time = gsub("X", "", time))
data <- select(data, -TIME_PERIOD)
data <- separate(data, value, into = c("value", "flag"), sep = " ")
View(data)
data[data == ":"] <- NA
View(data)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_PARTME$FI/?format=CSV")
head(data)
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
var_names
data <- separate(data, var, into = var_names, sep = ";")
head(data)
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_PARTME$FI/?format=CSV")
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
data <- select(data, -TIME_PERIOD)
data <- gather(data, time, value, paste0("X", 1997:2019))
data <- mutate(data, time = gsub("X", "", time))
data <- read.csv("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_PARTME$FI/?format=CSV")
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
head(data)
data <- separate(data, var, into = var_names, sep = ";")
data <- select(data, -TIME_PERIOD)
data <- gather(data, time, value, paste0("X", 1997:2019))
data <- mutate(data, time = gsub("X", "", time))
head(data)
data <- separate(data, value, into = c("value", "flag"), sep = " ")
data[data == ":"] <- NA
head(data)
View(data)
read_lmp_data <- function(url) {
data <- read.csv(url)
var_names <- unlist(strsplit(names(data)[1], "\\."))
names(data) <- c("var", names(data)[-1])
data <- separate(data, var, into = var_names, sep = ";") %>%
gather(time, value, paste0("X", 1997:2019)) %>%
mutate(time = gsub("X", "", time)) %>%
select(-TIME_PERIOD) %>%
separate(value, into = c("value", "flag"), sep = " ")
data[data == ":"] <- NA
data
}
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
head(data)
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_PARTME$FI/?format=CSV")
head(data)
unique(data$SEX)
unique(data$AGE)
data <- filter(data, SEX == "T", AGE == "TOTAL")
head(data)
library(pttdatahaku)
url <- "https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=JSON&lang=en"
# Access API.
resp <- httr::GET(url)
# resp <- lapply(url, httr::GET, query = list(content = content, meta = "min", lang = lang))
cont <- httr::content(resp, "text", encoding = "UTF-8")
# cont <- lapply(resp, httr::content, as = "text", encoding = "UTF-8")
x <- jsonlite::fromJSON(cont)
str(x)
x$dimension$LMP_TYPE %>% str()
x$dimension$LMP_TYPE$category$label
key <- data.frame(code = names(key_list), name = key_list)
key_list  <- x$dimension$LMP_TYPE$category$label
key <- data.frame(code = names(key_list), name = key_list)
key
head(key)
key_list  <- x$dimension$LMP_TYPE$category$label
key <- data.frame(code = names(key_list), name = unlist(key_list))
key
rownames(key) <- NULL
head(key)
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
head(data)
key_list  <- x$dimension$LMP_TYPE$category$label
key <- data.frame(LMP_TYPE = names(key_list), lmp_name = unlist(key_list))
rownames(key) <- NULL
data <- left_join(data, key, by = "LMP_TYPE")
head(data)
args(ptt_save_data)
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
lmp_expenditures <- left_join(data, key, by = "LMP_TYPE")
ptt_save_data(lmp_expenditures)
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_PARTME$FI/?format=CSV")
data <- filter(data, SEX == "T", AGE == "TOTAL")
lmp_participants <- left_join(data, key, by = "LMP_TYPE")
ptt_save_data(lmp_participants)
df <- ptt_read_data("lmp_participants")
head(df)
tail(df)
unique(df$UNIT)
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_EXPME$FI/?format=CSV")
data <- select(data, -FREQ)
lmp_expenditures <- left_join(data, key, by = "LMP_TYPE")
head(lmp_expenditures)
ptt_save_data(lmp_expenditures)
data <- read_lmp_data("https://webgate.ec.europa.eu/empl/redisstat/api/dissemination/sdmx/2.1/data/LMP_PARTME$FI/?format=CSV")
data <- filter(data, SEX == "T", AGE == "TOTAL") %>%
select(-AGE, -SEX, -UNIT, -FREQ)
lmp_participants <- left_join(data, key, by = "LMP_TYPE")
head(lmp_participants)
ptt_save_data(lmp_participants)
load("C:/Users/juhoa/git_clones/statficlassifications/data/aluetyyppi.rda")
load("C:/Users/juhoa/git_clones/statficlassifications/data/aluetyyppi2.rda")
head(aluetyyppi)
head(aluetyyppi2)
