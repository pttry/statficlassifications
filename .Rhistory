key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
load_all()
get_region_code_name_key("seutukunta")
get_region_code_name_key("seutukunta", as_named_vector = TRUE)
get_region_code_name_key("seutukunta", "maakunta")
v <- c("SSS", "KU103", "KU061","SK213", "MK04")
codes_to_names(v)
v <- c("SSS", "KU103", "KU061","SK213", "MK04", "nav9w4t")
codes_to_names(v)
f <- factor(c("SSS", "KU103", "KU061","SK213", "MK04"))
codes_to_names(f)
grepl("^d+$", "KU213")
grepl("^d+$", "213")
grepl("^\d+$", "213")
grepl("^\\d+$", "213")
grepl("^\\d+$", "SK213")
v
x <- v
grepl("^\\d+$", x)
any(!grepl("^\\d+$", x))
any(grepl("^\\d+$", x)
)
"It appears you are trying to map codes without prefixes to regions. \\n
In this case, same codes may map to multiple regions so there is a risk \\n
errors in mapping. I will start by first trying to fit kunnat to \\n'
to your codes and then seutukunnat, then maakunnat then suuralueet and \\n
then ely-alueet."
"It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \\n
errors in mapping. I will start by first trying to fit kunnat to \\n'
to your codes and then seutukunnat, then maakunnat then suuralueet and \\n
then ely-alueet."
"It appears you are trying to map codes without prefixes to regions.
In this case, same codes may map to multiple regions so there is a risk
errors in mapping. I will start by first trying to fit kunnat to
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet."
cat("It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \n
errors in mapping. I will start by first trying to fit kunnat to \n
to your codes and then seutukunnat, then maakunnat then suuralueet and \n
then ely-alueet.")
cat("It appears you are trying to map codes without prefixes to regions. \n
In this case, same codes may map to multiple regions so there is a risk \n
errors in mapping. I will start by first trying to fit kunnat to \n
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet.")
cat("It appears you are trying to map codes without prefixes to regions.
In this case, same codes may map to multiple regions so there is a risk
errors in mapping. I will start by first trying to fit kunnat to
to your codes and then seutukunnat, then maakunnat then suuralueet and
then ely-alueet.")
prefix_name_key$prefix[-1:2]
prefix_name_key$prefix[-(1:2)]
prefix_name_key$prefix
prefix_name_key$prefix[prefix_name_key$prefix != "SSS"]
# Create the prefix name correspondence used by the package
key <- c("SSS" = "KOKO MAA",
"KU" = "kunta",
"SK" = "seutukunta",
"MK" = "maakunta",
"SA" = "suuralue",
"ELY" = "ely")
prefix_name_key<- data.frame(prefix = names(key), name = key)
rownames(prefix_name_key) <- NULL
usethis::use_data(prefix_name_key, overwrite = TRUE, internal = TRUE)
load_all()
prefix_name_key$prefix
v
v <- c("KU103", "061")
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x <- v
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x
names(x) <- x_names
statficlassifications::region_code_name_key
load_all()
rm(list = ls())
load_all()
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x <- c("KU103", "061")
x <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x
output <- dplyr::left_join(data.frame(alue_code = x),
statficlassifications::region_code_name_key,
by = "alue_code")$alue_name
x[is.na(output)]
x
is.na(output)
output
prefix <- "KU"
key <- statficlassifications:region_code_name_key
key <- statficlassifications::region_code_name_key
key <- dplyr::filter(key, grepl(prefix, key$alue_code))
key$alue_code <- unlist(sapply(str_extract, key$alue_code, pattern = prefix))
key$alue_code <- unlist(sapply(key$alue_code, str_extract, pattern = prefix))
head(key)
key <- statficlassifications::region_code_name_key
key <- dplyr::filter(key, grepl(prefix, key$alue_code))
key$alue_code <- unlist(sapply(key$alue_code, str_remove, pattern = prefix)
)
head(key)
devtools::install()
load("C:/Users/juhoa/git_clones/statficlassifications/data/region_code_name_key.rda")
region_code_name_key
head(region_code_name_key)
duplicated(region_code_name_key$alue_code)
tail(region_code_name_key)
View(region_code_name_key)
filter(region_code_name_key, alue_code == "SA4")
dplyr::filter(region_code_name_key, alue_code == "SA4")
region_code_name_key[duplicated(region_code_name_key$alue_code),]
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- key[!duplicated(region_code_name_key$alue_code),]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
devtools::load_all()
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2008:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
key <- key[!duplicated(region_code_name_key$alue_code),]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
key[!duplicated(region_code_name_key$alue_code),]
key[duplicated(region_code_name_key$alue_code),]
region_code_name_key[duplicated(region_code_name_key$alue_code),]
# Prepare and save general code-name key
# The idea is to go through all region classifications determined below for all years and look
# for all possible regions. In this way the the key will have all regions that have existed
# in year 2008 and after.
# For municipalities, the key also has their codes without prefixes?
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
key <- data.frame()
years <- 2020:2020
for(year in years) {
key_temp <- get_region_code_name_key(regions, year = year)
key <- rbind(key, key_temp)
print(year)
}
key <- key[!duplicated(key), ]
#key <- key[!duplicated(region_code_name_key$alue_code),]
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_name_key <- key
usethis::use_data(region_code_name_key, overwrite = TRUE)
install()
devtools::install()
load_all()
devtools::load_all()
v <- c(5,20,111)
set_region_codes(v)
x <- 5
paste0("000", as.character(x))
stringr::str_sub(paste0("000", as.character(x)), -3,-1)
numeric_to_character <- function(x, char_length) {
stringr::str_sub(paste0("000", as.character(x)), -char_length,-1)
}
numeric_to_character(x)
numeric_to_character(x, char_length = 3)
numeric_to_character(x, char_length = 2)
numeric_to_character(x, char_length = 1)
numeric_to_character("005")
numeric_to_character("005", 3)
numeric_to_character("005", 2)
v <- c(4,5)
numeric_to_character(v)
numeric_to_character(v, char_length = 3)
numeric_code_to_character <- function(x, region_level_prefix) {
if(region_level_prefix %in% c("KU", "SK")) {
char_length <- 3
} else {
char_length <- 2
}
stringr::str_sub(paste0("000", as.character(x)), -char_length,-1)
}
load_all()
library(devtools)
load_all()
rm(list = ls())
load_all()
v <- c(5,20,111)
numeric_code_to_character(v)
numeric_code_to_character(v, "KU")
set_region_codes(v)
load_all()
set_region_codes(v)
load_all()
set_region_codes(v)
x <- v
x
if(any(x %in% codes$SK[codes$SK %in% codes$KU]))  {
warning(paste("Code(s)", paste(x[x %in% codes$SK[codes$SK %in% codes$KU]], collapse = ", "),
"could have been interpreted as seutukunta code(s), but have been interpreted as municipality code(s)."))
}
abolished_mun_key <- statficlassifications::abolished_mun_key
regionkey <- statficlassifications::regionkey
prefixes <- c("KU", "MK", "SK")
codes <- lapply(list(unique(abolished_mun_key$joiner),
unique(regionkey$maakunta_code),
unique(regionkey$seutukunta_code)), gsub, pattern = "[^0-9.-]", replacement = "")
names(codes) <- prefixes
if(any(x %in% codes$SK[codes$SK %in% codes$KU]))  {
warning(paste("Code(s)", paste(x[x %in% codes$SK[codes$SK %in% codes$KU]], collapse = ", "),
"could have been interpreted as seutukunta code(s), but have been interpreted as municipality code(s)."))
}
if(!all(x %in% unlist(codes))) {
warning(paste("Code(s)",
paste(x[!(x %in% unlist(codes))], collapse = ", "),
"not recognized as region codes. They have been left as they were."))
}
prefix <- "KU"
x <- numeric_code_to_character(x, region_level_prefix = prefix)
x
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
x
prefix <- "MK"
x <- numeric_code_to_character(x, region_level_prefix = prefix)
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)] <- paste0(prefix, x[x %in% codes[[prefix]]])
x
set_region_codes(v)
prefix <- "MK"
x[(x %in% codes[[prefix]])
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)]
x[x %in% codes[[prefix]]]
prefix <- "KU"
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)]
x
x <- v
x[(x %in% codes[[prefix]]) & !grepl(prefix,x)]
load_all()
load_all()
v
set_region_codes(v)
set_region_codes(v, regon_level = "KU")
set_region_codes(v, region_level = "KU")
load_all()
set_region_codes(v, region_level = "KU")
set_region_codes(v, region_level = "SK")
set_region_codes(v, region_level = "MK")
load_all()
set_region_codes(v, region_level = "KU")
set_region_codes(v, region_level = "MK")
set_region_codes(v, region_level = "SK")
set_region_codes(c(1,2,3,4))
set_region_codes(c(1,2,3,4), "KU")
v <- as.factor(1:4)
v
set_region_codes(v)
is.numeric(v)
load_all()
set_region_codes(v)
set_region_codes(v, region_level = "KU")
v <- ("005", "SK112")
v <- c("005", "SK112")
set_region_codes(v)
v
v <- c(5,20,111)
codes_to_names(v)
load_all()
codes_to_names(v)
codes_to_names(v)
load_all()
codes_to_names(v)
devtools::load_all()
# Prepare and save general code-name key
# The idea is to go through all region classifications determined below for all years and look
# for all possible regions. In this way the the key will have all regions that have existed
# in year 2008 and after.
# A key only works if it is a function. That is, it maps all possible codes to unique names.
# This means that the region to code key can map each region to a single code and the code
# to region key can map each code to a single region.
# Region code to name key
# Mapping from codes to names
regions <- c("kunta", "maakunta", "seutukunta", "suuralue", "ely")
master_key <- data.frame()
sys_current_year <- as.double(substring(Sys.Date(), 1,4))
years <- 2008:sys_current_year
for(year in years) {
master_key_temp <- get_regionclassification(regions, year = year)
master_key_temp$year <- year
master_key <- rbind(master_key, master_key_temp)
print(year)
}
key <- master_key
# Remove duplicates due to repetition of years
key <- key[!duplicated(dplyr::select(key, -year)), ]
# Find duplicated codes and remove them from the key
duplicates <- dplyr::filter(key, alue_code %in% key[duplicated(key$alue_code),]$alue_code)
key <- dplyr::filter(key, !(alue_code %in% key[duplicated(key$alue_code),]$alue_code))
# Find the latest name for each duplicated code and mark it with TRUE
temp_df<-duplicates %>%
group_by(alue_code) %>%
summarize(year = max(year)) %>%
mutate(leave = TRUE)
# Add the marks of latest name to the duplicates and leave those of the latest year
duplicates <- left_join(duplicates, temp_df, by = c("alue_code", "year")) %>%
filter(leave == TRUE) %>%
select(-year, -leave)
# Combine with the other codes
key <- dplyr::select(key, -year)
key <- rbind(key, duplicates)
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
rownames(key) <- NULL
# Vuonna 2018 ja ennen Ahvenanmaa - Åland, Vuonna 2019 ja jälkeen Ahvenanmaa
#key <- dplyr::filter(key, alue_name != "Ahvenanmaa - Åland")
region_code_to_name_key <- key
usethis::use_data(region_code_to_name_key, overwrite = TRUE)
# When mapping names to codes, only with the information of the region name it
# is impossible to uniquely map. Some region names simply correspond to multiple
# codes.
key <- master_key
# Remove duplicates due to repetition of years
key <- key[!duplicated(dplyr::select(key, -year)), ]
# Find duplicated names and remove them from the key
duplicates <- dplyr::filter(key, alue_name %in% key[duplicated(key$alue_name),]$alue_name)
key <- dplyr::filter(key, !(alue_name %in% key[duplicated(key$alue_name),]$alue_name))
key <- dplyr::select(key, -year)
# Find the latest name for each duplicated code and mark it with TRUE
temp_df<-duplicates %>%
group_by(alue_name) %>%
mutate(do_smth = length(unique(sapply(unique(alue_code), gsub, pattern = "[^a-zA-Z]", replacement = ""))) == 1)
to_key <- filter(temp_df, !do_smth) %>% select(-year, -do_smth)
key <- rbind(key, to_key)
temp_df <- temp_df %>%
filter(do_smth) %>%
group_by(alue_name) %>%
summarize(year = max(year)) %>%
mutate(leave = TRUE)
# Add the marks of latest name to the duplicates and leave those of the latest year
duplicates <- left_join(duplicates, temp_df, by = c("alue_name", "year")) %>%
filter(leave == TRUE) %>%
select(-year, -leave)
key <- rbind(key, duplicates)
key <- rbind(key, data.frame(alue_code = "SSS", alue_name = "KOKO MAA"))
key <- key[!duplicated(key),]
nonstandard_key <- c("koko maa" = "SSS",
"uudenmaan maakunta" = "MK01",
"itä-uudenmaan maakunta" = "MK20",
"varsinais-suomen maakunta" = "MK02",
"satakunnan maakunta" = "MK04",
"kanta-hämeen maakunta" = "MK05",
"pirkanmaan maakunta" = "MK06",
"päijät-hämeen maakunta" = "MK07",
"kymenlaakson maakunta" = "MK08",
"etelä-karjalan maakunta" = "MK09",
"etelä-savon maakunta" = "MK10",
"pohjoissavon maakunta" = "MK11",
"pohjois-karjalan maakunta" = "MK12",
"keski-suomen maakunta" = "MK13",
"etelä-pohjanmaan maakunta" = "MK14",
"pohjanmaan maakunta" = "MK15",
"keski-pohjanmaan maakunta" = "MK16",
"pohjois-pohjanmaan maakunta" = "MK17",
"kainuun maakunta" = "MK18",
"lapin maakunta" = "MK19",
"ahvenanmaa - åland" = "MK21",
"Uudenmaan maakunta" = "MK01",
"Itä-Uudenmaan maakunta" = "MK20",
"Varsinais-Suomen maakunta" = "MK02",
"Satakunnan maakunta" = "MK04",
"Kanta-Hämeen maakunta" = "MK05",
"Pirkanmaan maakunta" = "MK06",
"Päijät-Hämeen maakunta" = "MK07",
"Kymenlaakson maakunta" = "MK08",
"Etelä-Karjalan maakunta" = "MK09",
"Etelä-Savon maakunta" = "MK10",
"Pohjoissavon maakunta" = "MK11",
"Pohjois-Karjalan maakunta" = "MK12",
"Keski-Suomen maakunta" = "MK13",
"Etelä-Pohjanmaan maakunta" = "MK14",
"Pohjanmaan maakunta" = "MK15",
"Keski-Pohjanmaan maakunta" = "MK16",
"Pohjois-Pohjanmaan maakunta" = "MK17",
"Kainuun maakunta" = "MK18",
"Lapin maakunta" = "MK19",
"Ahvenanmaa - Åland" = "MK21",
"Maarianhamina - Mariehamn" = "KU478")
nonstandard_region_names_key <- data.frame(alue_name = names(nonstandard_key), alue_code = nonstandard_key)
rownames(nonstandard_region_names_key) <- NULL
key <- rbind(key,nonstandard_region_names_key)
region_name_to_code_key <- key
usethis::use_data(region_name_to_code_key, overwrite = TRUE)
document()
library(devtools())
document()
document()
check()
check()
.Last.error.trace
check()
search_classifications()
check()
check()
check()
check()
install()
document8)
document()
install()
install()
load("C:/Users/juhoa/git_clones/statficlassifications/data/regionkey.rda")
library(tidyverse)
filter(regionkey, seutukunta_name == "Vaasa")
search_keys(source = "kunta", target = "seutukunta", year = 2021)
devtools::load_all()
search_keys(source = "kunta", target = "seutukunta", year = 2021)
search_keys(source = "kunta", target = "seutukunta", year = 2021, as_localId = TRUE)
search_keys(source = "kunta", target = "seutukunta", year = 2021, as_localId = TRUE) %>% get_key() -> key
head(key)
filter(key, source_name = "Isokyrö")
filter(key, source_name == "Isokyrö")
filter(key, target_name == "Seinäjoki")
randomize_na <- function(df, from = 1:4) {
num_cols <- names(df)[as.vector(sapply(df, class)) == "numeric"]
for(col in num_cols) {
new_values <- sample(from, sum(is.na(df[col])), replace = TRUE)
df[[col]][is.na(df[[col]])] <- new_values
}
df
}
library(devtools)
load_all()
data <- get_regionkey() %>%
dplyr::select(kunta_name) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
data %>% add_region(c("kunta", "maakunta"))
data %>% add_region(c("seutukunta", "maakunta")) %>% head()
load_all()
data %>% add_region(c("seutukunta", "maakunta")) %>% head()
# Generate random municipal data
data <- get_regionkey() %>%
dplyr::select(kunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
data %>% add_region(c("seutukunta", "maakunta"))
data %>% add_region(c("seutukunta", "maakunta")) %>% head()
load_all()
head(data)
data %>% add_region("seutukunta", "maakunta") %>% head()
data <- get_regionkey(year = 2020) %>%
dplyr::select(kunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
data %>% add_region("seutukunta", "maakunta", year = 2020)
install()
library(devtools)
load_all()
data <- get_regionkey() %>%
dplyr::select(kunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
data <- get_regionkey() %>%
dplyr::select(seutukunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
key <- get_regionkey("seutukunta", "maakunta")
head(key)
dim(key)
data <- get_regionkey("seutukunta") %>%
dplyr::select(seutukunta_code) %>%
dplyr::mutate(values = rnorm(dplyr::n()))
head(data)
data %>% add_region("maakunta") %>% head()
load_all()
data %>% add_region("maakunta") %>% head()
load_all()
data %>% add_region("maakunta") %>% head()
install()
install()
